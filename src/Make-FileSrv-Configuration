#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Make Tunnelbox Configuration
# Copyright (C) 2012-2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import sys;
import time;
import adns;

# NorNet
from NorNetAPI       import *;
from NorNetNodeSetup import *;


# ###### Generate TFTP daemon configuration #################################
def makeTFTPDConfiguration(configNamePrefix):
   if configNamePrefix == None:
      configNamePrefix = 'tftpd-' + localSite['site_short_name']
   configurationName = configNamePrefix + '-config'
   outputFile = codecs.open(configurationName, 'w', 'utf-8')
   writeAutoConfigInformation(outputFile)

   outputFile.write('TFTP_USERNAME="tftp"\n')
   outputFile.write('TFTP_DIRECTORY="/filesrv/tftp"\n')
   outputFile.write('TFTP_ADDRESS="[::]:69" \n')   
   outputFile.write('TFTP_OPTIONS="--secure"\n')

   outputFile.close()


# ###### Generate NFS daemon configuration ##################################
def makeNFSDConfiguration(fullSiteList, rwSystemList, configNamePrefix):
   if configNamePrefix == None:
      configNamePrefix = 'tftpd-' + localSite['site_short_name']
   configurationName = configNamePrefix + '-config'
   outputFile = codecs.open(configurationName, 'w', 'utf-8')
   writeAutoConfigInformation(outputFile)

   # ====== Global shares ===================================================
   log('Writing global configuration ...')
   outputFile.write('# Global shares\n')
   outputFile.write('/filesrv/pub\t')
   for version in [ 4, 6 ]:
      outputFile.write(str(makeNorNetIP(0, 0, 0, 0, version)) + '(subtree_check,sync,rw)\t')
      outputFile.write(str(makeNorNetTunnelIP(0, 0, 0, 0, version)) + '(subtree_check,sync,rw)\t')
   outputFile.write('\n')
   outputFile.write('/filesrv/adm\t')
   for i in range(0, len(rwSystemList)):
      outputFile.write(rwSystemList[i] + '(subtree_check,sync,rw)\t')
   for version in [ 4, 6 ]:
      outputFile.write(str(makeNorNetIP(0, 0, 0, 0, version)) + '(subtree_check,sync,ro)\t')
      outputFile.write(str(makeNorNetTunnelIP(0, 0, 0, 0, version)) + '(subtree_check,sync,ro)\t')
   outputFile.write('\n')
   outputFile.write('/filesrv/sys\t')
   for i in range(0, len(rwSystemList)):
      outputFile.write(rwSystemList[i] + '(subtree_check,sync,rw)\t')
   outputFile.write('\n\n')

   # ====== Per-node private share ==========================================
   makeDir('/filesrv/sys')
   log('Writing per-node configuration ...')
   outputFile.write('# Per-node shares\n')
   adnsResolver = adns.init()
   for siteIndex in fullSiteList:
      # ====== Prepare site directory =======================================
      siteQueryList     = [ None ]
      site              = fullSiteList[siteIndex]
      siteDirectory     = '/filesrv/sys/' + str(site['site_index'])      
      makeDir(siteDirectory)
      oldDirectory = changeDir('/filesrv/sys')
      makeSymlink(site['site_domain'], str(site['site_index']))
      changeDir(oldDirectory)

      # ====== Prepare node directories =====================================
      for nodeIndex in range(1, 255):
         nodeDirectory = siteDirectory + '/' + str(nodeIndex)
         makeDir(nodeDirectory)

         outputFile.write(nodeDirectory + '\t')        
         siteProviderList = getNorNetProvidersForSite(site)
         for providerIndex in siteProviderList:
            provider = siteProviderList[providerIndex]
            for version in [ 4, 6 ]:
               # ====== Add entry for node ==================================
               nodeAddress = makeNorNetIP(providerIndex, siteIndex, nodeIndex, -1, version)
               outputFile.write(str(nodeAddress.ip) + '(subtree_check,sync,rw)\t')

               # ====== Query DNS for the node's name =======================
               if ((version == 4) and
                   (providerIndex == site['site_default_provider_index'])):
                  # print str(nodeAddress.ip)
                  query = adnsResolver.submit_reverse(str(nodeAddress.ip), adns.rr.PTR)
                  siteQueryList.append(query)

         outputFile.write('\n')

      # ====== Create symlinks with host name ===============================
      resolvedNames = 0
      while resolvedNames < len(siteQueryList) - 1:
         time.sleep(0.334)
         resolvedNames = resolvedNames + len(adnsResolver.completed())
         # print resolvedNames

      # All names are resolved now (successfully or unsuccessfully)!    
      oldDirectory = os.getcwd()
      os.chdir(siteDirectory)
      for i in range(1,len(siteQueryList)):
         answer = siteQueryList[i].check()
         if answer[0] == 0:
            # print i,hostName,answer[3][0]
            linkName      = getHostnameFromFQDN(str(answer[3][0]))
            newLinkTarget = str(i)
            makeSymlink(linkName, newLinkTarget)

      os.chdir(oldDirectory)
      
   outputFile.close()



# ###### Main program #######################################################
loginToPLC()

fullSiteList = fetchNorNetSiteList(False)
# NOTE: Site list also includes disabled sites!
#fullNodeList = fetchNorNetNodeList()


rwSystemList = []
rwSystems = getFileServRWSystemsConfigurationString()
if rwSystems != None:
   parameters = re.split(r'''[ ]*(?=(?:[^'"]|'[^']*'|"[^"]*")*$)''', rwSystems)
   for i in range(0, len(parameters)):
      name = unquote(parameters[i])
      # print i, name
      # print resolveHostname(name, AF_INET)
      # print resolveHostname(name, AF_INET6)
      rwSystemList.append(name)


makeTFTPDConfiguration('tftpd-hpa')
makeNFSDConfiguration(fullSiteList, rwSystemList, 'nfsd')
