#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# NorNet ?????
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import sys;
import xmlrpclib;
import re;
import os;
import hashlib;
import datetime;

# Needs package python-ipaddr (Fedora Core, Ubuntu, Debian)!
from ipaddr import IPAddress, IPv4Address, IPv4Network, IPv6Address, IPv6Network;

# NorNet
from NorNetTools         import *;
from NorNetAPI           import *;
from NorNetProviderSetup import *;
from NorNetSiteSetup     import *;



# ###########################################################################


# ###### Generate provider configuration ####################################
def makeProviderConfiguration():
   configurationName = 'provider-config'
   outputFile = makeConfigFile('provider', configurationName, True)

   providers         = 0
   providerIndexSet  = []
   providerAbbrevSet = []
   for providerIndex in NorNet_ProviderList:
      providerName   = NorNet_ProviderList[providerIndex][0]
      providerAbbrev = NorNet_ProviderList[providerIndex][1]
      if not re.match(r"^[a-z][a-z0-9]*$", providerAbbrev):
         error('Bad provider abbreviation ' + providerAbbrev)
      if ((providerIndex < 0) or (providerIndex > 255)):
         error('Bad provider index ' + str(providerIndex))

      outputFile.write('provider' + str(providerIndex) + '_longname="'  + providerName   + '"\n')
      outputFile.write('provider' + str(providerIndex) + '_shortname="' + providerAbbrev + '"\n')
      outputFile.write('nnp_' + providerAbbrev + '=' + str(providerIndex) + '\n\n')

      providerIndexSet.append(providerIndex)
      providerAbbrevSet.append(providerAbbrev)
      providers=providers+1

   if len(providerIndexSet) != len(set(providerIndexSet)):
      error('Provider list contains non-unqiue index values')
   if len(providerAbbrevSet) != len(set(providerAbbrevSet)):
      error('Provider list contains non-unqiue abbreviation values')

   outputFile.close()
   return configurationName


# ###### Generate site configuration ########################################
def makeSiteConfiguration(fullSiteList, site, v4only):
   configurationName = 'site-' + site['site_short_name'] + '-config'
   outputFile = makeConfigFile('Site', configurationName, True)

   log('Making site configuration for ' + site['site_long_name'] + ' ...')

   siteIndex        = site['site_index']
   siteShortName    = str.lower(site['site_short_name'])
   siteProviderList = getNorNetProvidersForSite(site)
   for providerIndex in siteProviderList:
      provider            = siteProviderList[providerIndex]
      providerShortName   = provider['provider_short_name']
      providerNetworkIPv4 = makeNorNetIP(providerIndex, siteIndex, 0, 0, 4)
      providerNetworkIPv6 = makeNorNetIP(providerIndex, siteIndex, 0, 0, 6)
      outputFile.write(siteShortName + '_' + providerShortName + '_network_ipv4="' + str(providerNetworkIPv4) + '"\n')
      outputFile.write(siteShortName + '_' + providerShortName + '_network_ipv6="' + str(providerNetworkIPv6) + '"\n')

   makeTunnelBoxConfiguration(fullSiteList, site, v4only)

   outputFile.close()
   return configurationName


# ###### Generate sites configuration #######################################
def makeNorNetConfiguration(v4only):
   configurationName = 'nornet-config'
   outputFile = makeConfigFile('nornet', configurationName, True)

   providerConfigurationName = makeProviderConfiguration()
   outputFile.write('. ./' + providerConfigurationName + '\n\n')

   fullSiteList = fetchNorNetSiteList()

   for localSiteIndex in fullSiteList:
      localSite = fullSiteList[localSiteIndex]

      siteConfigurationName = makeSiteConfiguration(fullSiteList, localSite, v4only)
      outputFile.write('. ./' + siteConfigurationName + '\n')

   outputFile.close()
   return configurationName


# ###### Get tunnel configuration ###########################################
def _getTunnel(localSite, localProvider, remoteSite, remoteProvider, version):
   localSiteIndex      = localSite['site_index']
   localProviderIndex  = localProvider['provider_index']
   localSiteTags       = localSite['site_tags']
   remoteProviderIndex = remoteProvider['provider_index']
   remoteSiteIndex     = remoteSite['site_index']
   remoteSiteTags      = remoteSite['site_tags']

   # ====== Get tunnel configuration ========================================
   tunnelOverIPv4 = False
   if (version != 4):
      localOuterAddress  = localProvider['provider_tunnelbox_ipv6']
      remoteOuterAddress = remoteProvider['provider_tunnelbox_ipv6']
      if ((localOuterAddress == IPv6Address('::')) or (remoteOuterAddress == IPv6Address('::'))):
         tunnelOverIPv4 = True
      else:
         tunnelInterface = 'seks' + str(remoteSiteIndex) + "-" + str(localProviderIndex) + '-' + str(remoteProviderIndex)
   if ((version == 4) or (tunnelOverIPv4 == True)):
      localOuterAddress  = localProvider['provider_tunnelbox_ipv4']
      remoteOuterAddress = remoteProvider['provider_tunnelbox_ipv4']
      tunnelInterface    = 'gre' + str(remoteSiteIndex) + "-" + str(localProviderIndex) + '-' + str(remoteProviderIndex)
   localInnerAddress     =  makeNorNetTunnelIP(localSiteIndex, localProviderIndex,
                                               remoteSiteIndex, remoteProviderIndex, version)
   remoteInnerAddress    =  makeNorNetTunnelIP(remoteSiteIndex, remoteProviderIndex,
                                               localSiteIndex, localProviderIndex, version)
   tunnelKey = makeNorNetTunnelKey(localSiteIndex, localProviderIndex,
                                   remoteSiteIndex, remoteProviderIndex)

   # ====== Create tunnel structure =========================================
   norNetTunnel = {
      'tunnel_interface'            : tunnelInterface,
      'tunnel_local_outer_address'  : localOuterAddress,
      'tunnel_remote_outer_address' : remoteOuterAddress,
      'tunnel_local_inner_address'  : localInnerAddress,
      'tunnel_remote_inner_address' : remoteInnerAddress,
      'tunnel_key'                  : tunnelKey,
      'tunnel_over_ipv4'            : tunnelOverIPv4
   }

   return norNetTunnel


# ###### Get tunnel configuration for default tunnel to central site ########
def _getDefaultTunnel(fullSiteList, localSite, version):
   localSiteProviders          = getNorNetProvidersForSite(localSite)
   localDefaultProviderIndex   = localSite['site_default_provider_index']

   centralSite                 = fullSiteList[NorNet_SiteIndex_Central]
   centralSiteProviders        = getNorNetProvidersForSite(centralSite)
   centralDefaultProviderIndex = centralSite['site_default_provider_index']

   return _getTunnel(localSite, localSiteProviders[localDefaultProviderIndex],
                     centralSite, centralSiteProviders[centralDefaultProviderIndex],
                     version)


# ###### Get ID for routing table ###########################################
def _getTableID(opIndex):
   return 1000000 + opIndex


# ###### Get preference for routing table ###################################
def _getTablePref(opIndex, level):
   return 1000 + (1000 * level) + opIndex


# ###### Generate tunnelbox configuration for given provider ################
def _makeTunnelboxProvider(fullSiteList, localSite, localProviderList, localProvider, pathNumber, v4only):
   configurationName = 'tunnelbox-' + localSite['site_short_name'] + '-' + \
                       localProvider['provider_short_name'] + '-config'
   outputFile = makeConfigFile('Tunnelbox-Provider', configurationName, True)
   log('Making tunnelbox provider configuration for ' + \
       localSite['site_long_name'] + '/' + localProvider['provider_long_name'] + ' ...')

   localSiteIndex     = localSite['site_index']
   localProviderIndex = localProvider['provider_index']
   stateList          = [ 'stop', 'start', 'status' ]
   for state in stateList:
      if ((state == 'start') or (state == 'stop')):
         outputFile.write('if [ "$state" = "' + state + '" -o "$state" = "restart" ] ; then\n')
      else:
         outputFile.write('if [ "$state" = "' + state + '" ] ; then\n')

      # ====== Create provider-specific routing table =======================
      action = ''
      if (state == 'start'):
         action = 'Setting up'
      elif (state == 'stop'):
         action = 'Tearing down'
      elif (state == 'status'):
         action = 'Checking'

      routingTableID = _getTableID(localProviderIndex)
      if (state == 'start'):
         routingTableDestPref   = _getTablePref(localProviderIndex, 0)
         routingTableTOSPref    = _getTablePref(localProviderIndex, 1)
         routingTableSourcePref = _getTablePref(localProviderIndex, 2)

         if pathNumber + 1 < len(NorNet_TOSSettings):
            routingTableTOS = NorNet_TOSSettings[pathNumber + 1]
         else:
            routingTableTOS = 0x00

         outputFile.write('   log "' + action + ' connectivity of provider ' + \
                          localProvider['provider_long_name'] + '"\n')
         outputFile.write('   make-table ' + str(routingTableID) + '   # ' + \
                          localProvider['provider_long_name'] + ' table\n')

         # ====== Destination rules =========================================
         # For directly connected NorNet networks, skip further rules and go
         # to "main" table instead!
         providerList = getNorNetProvidersForSite(localSite)
         for version in [ 4, 6 ]:
            if ((version == 6) and (v4only == True)):
               continue
            fullNorNetNetwork    = makeNorNetIP(0, 0, 0, 0, version)
            localProviderNetwork = makeNorNetIP(localProviderIndex, localSiteIndex, 0, 0, version)
            outputFile.write('   add-table-selector main ' + str(routingTableDestPref) + \
                             ' to ' + str(localProviderNetwork) + '\n')

            # ====== TOS rule ===============================================
            # If TOS is set, select outgoing provider accordingly
            if routingTableTOS != 0x00:
               outputFile.write('   add-table-selector ' + str(routingTableID) + ' ' + str(routingTableTOSPref) + \
                                ' from ' + str(fullNorNetNetwork) + \
                                ' tos ' + hex(routingTableTOS) + '\n')

         # ====== Source rules ==============================================
         # Otherwise, use source address to determine the outgoing provider.
         for version in [ 4, 6 ]:
            if ((version == 6) and (v4only == True)):
               continue
            localProviderNetwork = makeNorNetIP(localProviderIndex, 0, 0, 0, version)
            outputFile.write('   add-table-selector ' + str(routingTableID) + ' ' + str(routingTableSourcePref) + \
                             ' from ' + str(localProviderNetwork) + '\n')

      elif (state == 'stop'):
         outputFile.write('   remove-table ' + str(routingTableID) + '\n')



      # ====== Create provider-specific tunnels and routes ==================
      for remoteSiteIndex in fullSiteList:
         if remoteSiteIndex == localSiteIndex:
            continue
         remoteSite         = fullSiteList[remoteSiteIndex]
         remoteProviderList = getNorNetProvidersForSite(remoteSite)
         outputFile.write('   # ------ ' + localSite['site_long_name'] + \
                          ' (' + str(localSite['site_index']) + ') <-> ' + \
                          remoteSite['site_long_name'] + \
                          ' (' + str(remoteSite['site_index']) + ') ------\n')

         for remoteProviderIndex in remoteProviderList:
            remoteProvider = remoteProviderList[remoteProviderIndex]
            outputFile.write('   # ~~~~~~ ' + remoteProvider['provider_long_name'] + \
                             ' (' + str(remoteProvider['provider_index']) + ') ~~~~~~\n')
            if ((state == 'start') or (state == 'stop') or (state == 'status')):
               outputFile.write('   log "' + action + ' tunnels with ' + \
                                remoteSite['site_long_name'] + ' via [' + \
                                localProvider['provider_long_name'] + ' <--> ' + \
                                remoteProvider['provider_long_name'] + ']:"\n')

            for version in [ 4, 6 ]:
               if ((version == 6) and (v4only == True)):
                  continue
               tunnel        = _getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
               remoteNetwork = makeNorNetIP(remoteProviderIndex, remoteSiteIndex, 0, 0, version)

               outputFile.write('   log-action "Tunnel ' + tunnel['tunnel_interface'] + ': ' + \
                                str(tunnel['tunnel_local_inner_address'])  + ' <--> ' + \
                                str(tunnel['tunnel_remote_inner_address']) + '"\n')

               # ====== Create tunnels ======================================
               if (state == 'start'):
                  options = ''
                  if ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     options = '--add-to-existing-tunnel'
                  outputFile.write('   make-tunnel ' + \
                                   tunnel['tunnel_interface']                 + ' ' + \
                                   hex(tunnel['tunnel_key'])                  + ' ' + \
                                   str(tunnel['tunnel_local_outer_address'])  + ' ' + \
                                   str(tunnel['tunnel_remote_outer_address']) + ' ' + \
                                   str(tunnel['tunnel_local_inner_address'])  + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address']) + ' ' + \
                                   '"' + options + '"\n')
               elif (state == 'stop'):
                  if not ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     outputFile.write('   remove-tunnel ' + \
                                      tunnel['tunnel_interface'] + ' ' + \
                                      hex(tunnel['tunnel_key'])  + '\n')
               elif (state == 'status'):
                  outputFile.write('   show-tunnel ' + \
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_local_inner_address']) + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address']) + ' "' + \
                                   localSite['site_long_name'] + \
                                   str(localSite['site_index']) + ' <-> ' + \
                                   remoteSite['site_long_name'] + \
                                   ' (' + str(remoteSite['site_index']) + ') via [' + \
                                   remoteProvider['provider_long_name'] + \
                                   ' (' + str(remoteProvider['provider_index']) + ') <--> ' + \
                                   localProvider['provider_long_name'] + \
                                   ' (' + str(localProvider['provider_index']) + ')]"\n')


               # ====== Create routing table entries ========================
               if (state == 'start'):
                  # ====== Entry into provider-specific routing table =======
                  outputFile.write('   make-route ' + \
                                   str(routingTableID) + ' ' +
                                   str(remoteNetwork) + ' ' +
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address']) + '   # via ' + \
                                   localProvider['provider_long_name'] + ' <--> ' + \
                                   remoteProvider['provider_long_name'] + ' tunnel\n')

                  # ====== Entry into global routing table ==================
                  metric = 10 + pathNumber
                  if remoteProviderIndex == localProviderIndex:
                     metric = 5
                  outputFile.write('   make-route ' + \
                                   'main ' +
                                   str(remoteNetwork) + ' ' +
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address']) + ' ' + \
                                   'metric ' + str(metric) + '   # via ' + \
                                   localProvider['provider_long_name'] + ' <--> ' + \
                                   remoteProvider['provider_long_name'] + ' tunnel\n')

               if ((state == 'start') or (state == 'stop')):
                  outputFile.write('   log-result 1\n')


      # ====== Default route to central site ================================
      if (state == 'start'):
         if (localSiteIndex != NorNet_SiteIndex_Central):
            for version in [ 4, 6 ]:
               if ((version == 6) and (v4only == True)):
                  continue
               defaultTunnel = _getDefaultTunnel(fullSiteList, localSite, version)
               outputFile.write('   make-route ' + \
                                str(routingTableID) + ' ' +
                                'default ' +
                                defaultTunnel['tunnel_interface'] + ' ' + \
                                str(defaultTunnel['tunnel_remote_inner_address']) + '   # DEFAULT to CENTRAL SITE\n')

      outputFile.write('fi\n\n')
      pathNumber = pathNumber + 1

   outputFile.close()
   return configurationName


# ###### Generate tunnelbox configuration for local network #################
def _makeTunnelboxNetwork(outputFile, state, localInterface,
                          localProvider, localSiteIndex, v4only):
   localProviderIndex = localProvider['provider_index']

   action = ''
   if (state == 'start'):
      action = 'Setting up'
   elif (state == 'stop'):
      action = 'Tearing down'
   outputFile.write('   log-action "' + action + ' local networks for ' + \
                    localProvider['provider_long_name'] + ' ..."\n')

   for version in [ 4, 6 ]:
      if ((version == 6) and (v4only == True)):
         continue

      localAddress = makeNorNetIP(localProviderIndex, localSiteIndex, NorNet_NodeIndex_Tunnelbox, -1, version)
      if state == 'start':
         outputFile.write('   make-address ' + localInterface + ' ' + str(localAddress) + '\n')
      elif state == 'stop':
         outputFile.write('   remove-address ' + localInterface + ' ' + str(localAddress) + '\n')

   outputFile.write('   log-result 1\n')


# ###### Generate tunnelbox configuration ###################################
def makeTunnelBoxConfiguration(fullSiteList, localSite, v4only):
   configurationName = 'tunnelbox-' + localSite['site_short_name'] + '-config'
   outputFile = makeConfigFile('Tunnelbox', configurationName, True)
   log('Making tunnelbox configuration for ' + localSite['site_long_name'] + ' ...')

   localSiteIndex    = localSite['site_index']
   localProviderList = getNorNetProvidersForSite(localSite)
   localInterface    = getTagValue(localSite['site_tags'], 'nornet_site_tb_internal_interface', '')
   if not re.match(r"^[a-z][a-z0-9-\.]*$", localInterface):
      error('Bad local interface setting for site ' + localSite['site_long_name'])
   sourceNatRange    = getTagValue(localSite['site_tags'], 'nornet_site_tb_nat_range_ipv4', '')
   fullNorNetIPv4    = makeNorNetIP(0, 0, 0, 0, 4)


   # ====== Remove local setup ==============================================
   outputFile.write('if [ "$state" = "stop" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log-action "Turning off IP forwarding ..."\n')
   outputFile.write('   sysctl -q net.ipv4.ip_forward=0\n')
   outputFile.write('   sysctl -q net.ipv6.conf.all.forwarding=0\n')
   outputFile.write('   log-result 1\n')
   for localProviderIndex in localProviderList:
      _makeTunnelboxNetwork(outputFile, 'stop', localInterface,
                            localProviderList[localProviderIndex], localSiteIndex, v4only)
   if localSiteIndex == NorNet_SiteIndex_Central:
      outputFile.write('   log-action "Turning off IPv4 NAT ..."\n')
      outputFile.write('   remove-nat ' + str(fullNorNetIPv4) + ' "' + sourceNatRange + '"\n')
      outputFile.write('   log-result 1\n')
   outputFile.write('fi\n\n')


   # ====== Configure tunnels and routing ===================================
   pathNumber        = 0
   for onlyDefault in [ True, False ]:
      for localProviderIndex in localProviderList:
         if ( ((onlyDefault == True)  and (localProviderIndex == localSite['site_default_provider_index'])) or \
              ((onlyDefault == False) and (localProviderIndex != localSite['site_default_provider_index'])) ):
            localProvider = localProviderList[localProviderIndex]
            tbpName = _makeTunnelboxProvider(fullSiteList, localSite,
                                             localProviderList, localProvider,
                                             pathNumber, v4only)
            outputFile.write('. ./' + tbpName +'\n')
            pathNumber = pathNumber + 1


   # ====== Make local setup ================================================
   outputFile.write('\nif [ "$state" = "start" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log-action "Turning on IP forwarding..."\n')
   outputFile.write('   sysctl -q net.ipv4.ip_forward=1\n')
   outputFile.write('   sysctl -q net.ipv6.conf.all.forwarding=1\n')
   outputFile.write('   sysctl -q net.ipv4.tcp_ecn=1\n')
   outputFile.write('   log-result 1\n')
   for localProviderIndex in localProviderList:
      _makeTunnelboxNetwork(outputFile, 'start', localInterface,
                            localProviderList[localProviderIndex], localSiteIndex, v4only)
   if localSiteIndex == NorNet_SiteIndex_Central:
      outputFile.write('   log-action "Turning on IPv4 NAT ..."\n')
      outputFile.write('   make-nat ' + str(fullNorNetIPv4) + ' "' + sourceNatRange + '"\n')
      outputFile.write('   log-result 1\n')
   outputFile.write('fi\n\n')


   outputFile.write('\nif [ "$state" = "stop" -o "$state" = "start" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log-action "Flushing route cache ..."\n')
   outputFile.write('   ip route flush cache\n')
   outputFile.write('   log-result 1\n')
   outputFile.write('fi\n')

   outputFile.close()
   return configurationName


# ###### Generate node configuration ########################################
def makeNodeConfiguration(fullSiteList, node, variant, configNamePrefix, interfaceOverride):
   log('Making node configuration for ' + node['node_name'] + ' ...')

   # ====== Debian /etc/network/interfaces ==================================
   debianFile = None
   if variant == 'Debian':
      if configNamePrefix == None:
         configNamePrefix = 'node-' + node['node_name'] + '-'
      configurationName = configNamePrefix + 'interfaces'
      debianFile = makeConfigFile('Node', configurationName, False)

      debianFile.write('# ====== Loopback ======\n')
      debianFile.write('auto lo\n')
      debianFile.write('iface lo inet loopback\n\n')


   # ====== Fedora /etc/sysconfig/network-scripts/ifcfg-* ===================
   if variant == 'Fedora':
      if(configNamePrefix == None):
         configNamePrefix = 'node-' + node['node_name'] + '-'
      if interfaceOverride == None:
         interface = node['node_nornet_interface']
      else:
         interface = interfaceOverride
      for i in range(0, 256):
         configurationName = configNamePrefix + 'ifcfg-' + interface + ':' + str(i)
         try:
            os.unlink(configurationName)
         except OSError:
            print configurationName
            continue


   site = getNorNetSiteOfNode(fullSiteList, node)
   if site == None:
      error('Node ' + node['node_name'] + ' does not belong to a NorNet site')
   siteIndex   = site['site_index']
   nodeAddress = node['node_address']

   # ====== Get node information ============================================
   providerList = getNorNetProvidersForSite(site)
   for onlyDefault in [ True, False ]:
      for providerIndex in providerList:
         if ( ((onlyDefault == True)  and (providerIndex == site['site_default_provider_index'])) or \
              ((onlyDefault == False) and (providerIndex != site['site_default_provider_index'])) ):
            provider = providerList[providerIndex]
            if interfaceOverride == None:
               interface = node['node_nornet_interface']
            else:
               interface = interfaceOverride
            if providerIndex != site['site_default_provider_index']:
               interface = interface + ':' + str(providerIndex)


            # ====== Debian /etc/network/interfaces =========================
            if variant == 'Debian':
               debianFile.write('\n# ====== ' + provider['provider_long_name'] + ' (' + \
                                str(provider['provider_index']) + ') ======\n')
               debianFile.write('auto ' + interface + '\n')

            # ====== Fedora /etc/sysconfig/network-scripts/ifcfg-* ==========
            if variant == 'Fedora':
               if(configNamePrefix == None):
                  configNamePrefix = 'node-' + node['node_name'] + '-'
               configurationName = configNamePrefix + 'ifcfg-' + interface
               fedoraFile = makeConfigFile('Node', configurationName, False)
               fedoraFile.write('DEVICE=' + interface + '\n')
               fedoraFile.write('ONBOOT=yes\n')
               fedoraFile.write('BOOTPROTO=static\n')

            fedoraDnsServer = 1

            # ====== Generate IP configuration ==============================
            for version in [ 4, 6 ]:
               address = makeNorNetIP(providerIndex, siteIndex, nodeAddress,                -1, version)
               gateway = makeNorNetIP(providerIndex, siteIndex, NorNet_NodeIndex_Tunnelbox, -1, version)

               # ====== Debian /etc/network/interfaces ======================
               if variant == 'Debian':
                  if version == 4:
                     debianFile.write('iface ' + interface + ' inet static\n')
                     debianFile.write('   address ' + str(address.ip) + '\n')
                     debianFile.write('   netmask ' + str(address.netmask) + '\n')
                  else:
                     if providerIndex != site['site_default_provider_index']:   # NOTE: Work-around for buggy Ubuntu ifupdown!
                        debianFile.write('   up /sbin/ip -6 addr add ' + str(address) + ' dev ' + interface + '\n')
                        debianFile.write('   up /sbin/ip -6 addr del ' + str(address) + ' dev ' + interface + '\n')
                     else:
                        debianFile.write('\niface ' + interface + ' inet6 static\n')
                        debianFile.write('   address ' + str(address.ip) + '\n')
                        debianFile.write('   netmask ' + str(address.prefixlen) + '\n')

                  if providerIndex == site['site_default_provider_index']:
                     debianFile.write('   gateway ' + str(gateway.ip) + '\n')

                     dnsList = ''
                     for i in range(0, NorNet_MaxDNSServers - 1):
                        dns = IPAddress(getTagValue(site['site_tags'], 'nornet_site_dns' + str(1 + i), '0.0.0.0'))
                        if ((dns != IPv4Address('0.0.0.0')) and (dns.version == version)):
                           dnsList = dnsList + ' ' + str(dns)
                     if dnsList != '':
                        debianFile.write('   dns-nameservers' + dnsList + '\n')
                        debianFile.write('   dns-search ' + site['site_domain'] + '\n')

                     debianFile.write('\n')

               # ====== Fedora /etc/sysconfig/network-scripts/ifcfg-* =======
               if variant == 'Fedora':
                  if version == 4:
                     fedoraFile.write('IPADDR=' + str(address.ip) + '\n')
                     fedoraFile.write('NETMASK=' + str(address.netmask) + '\n')
                     if providerIndex == site['site_default_provider_index']:
                        fedoraFile.write('GATEWAY=' + str(gateway.ip) + '\n')
                  else:
                     fedoraFile.write('IPV6INIT=yes\n')
                     fedoraFile.write('IPV6_AUTOCONF=no\n')
                     fedoraFile.write('IPV6ADDR=' + str(address) + '\n')
                     if providerIndex == site['site_default_provider_index']:
                        fedoraFile.write('IPV6_DEFAULTGW=' + str(gateway.ip) + '\n')

                  if providerIndex == site['site_default_provider_index']:
                     for i in range(0, NorNet_MaxDNSServers - 1):
                        dns = IPAddress(getTagValue(site['site_tags'], 'nornet_site_dns' + str(1 + i), '0.0.0.0'))
                        if ((dns != IPv4Address('0.0.0.0')) and (dns.version == version)):
                           fedoraFile.write('DNS' + str(fedoraDnsServer) + '=' + str(dns) + '\n')
                           fedoraDnsServer = fedoraDnsServer + 1


   # ====== Debian /etc/network/interfaces ==================================
   if variant == 'Debian':
      debianFile.close()
   return True


# ###########################################################################


log('***** This is NorNet version 1.0! *****')
loginToPLC()

makeProviderConfiguration()
makeNorNetConfiguration(False)

fullSiteList = fetchNorNetSiteList()
node = fetchNorNetNode('altenessen.gamma.site')
if node != None:
   makeNodeConfiguration(fullSiteList, node, 'Debian', None, None)
   makeNodeConfiguration(fullSiteList, node, 'Fedora', None, 'p2p1')
