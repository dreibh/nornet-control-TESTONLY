#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Make Tunnelbox Configuration
# Copyright (C) 2012-2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import sys;

# NorNet
from NorNetAPI           import *;
from NorNetNodeSetup     import *;


# ###### Get tunnel configuration for default tunnel to central site ########
def getDefaultTunnel(fullSiteList, localSite, version):
   localSiteProviders          = getNorNetProvidersForSite(localSite)
   localDefaultProviderIndex   = localSite['site_default_provider_index']

   centralSite                 = fullSiteList[NorNet_SiteIndex_Central]
   centralSiteProviders        = getNorNetProvidersForSite(centralSite)
   centralDefaultProviderIndex = centralSite['site_default_provider_index']

   return getTunnel(localSite, localSiteProviders[localDefaultProviderIndex],
                     centralSite, centralSiteProviders[centralDefaultProviderIndex],
                     version)


# ###### Convert coordinate to degree/minutes/seconds #######################
def coordinateToDMS(coordinate, hemisphereTypes = 'NS'):
   hemisphere = hemisphereTypes[0]
   degrees = int(coordinate)
   if degrees < 0:
      degrees = abs(degrees)
      hemisphere = hemisphereTypes[1]

   m       = (coordinate % 1) * 60
   minutes = int(m)
   seconds = (m % 1) * 60

   return(str(degrees) + ' ' + str(minutes) + ' ' + str(seconds) + ' ' + hemisphere)


# ###### Obtain location string #############################################
def getLocString(latitude, longitude, altitude, size, precision):
   return(coordinateToDMS(latitude) + ' ' +
          coordinateToDMS(longitude,'EW') + ' ' +
          str(altitude) + 'm ' +
          str(size) + 'm ' +
          str(precision) + 'm ' + str(precision) + 'm ')


# ###### Obtain RR type for address #########################################
def rrTypeForAddress(address):
   if address.version == 4:
      return('A')
   elif address.version == 6:
      return('AAAA')
   error('Bad address type!')


# ###### Add provider's name to hostname ####################################
def addProviderToName(hostName, providerName):
   return(str.replace(hostName, '.', '.' + providerName + '.', 1))


# ###### Write SOA ##########################################################
def writeSOA(outputFile, nsHostNameFQDN, siteFQDN, refreshTime, retryTime, expireTime, minTTL, defaultTTL, slaves):
   outputFile.write('$TTL ' + str(defaultTTL) + '\n\n')
   outputFile.write('@\tIN\tSOA\t' + nsHostNameFQDN + ' root.' + siteFQDN+ ' (\n')
   outputFile.write('\t' + datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S") + '   ; Serial\n')
   outputFile.write('\t{0:14d}   ; Refresh time: interval for secondary DNS to check for updates (default: 3600)\n'.format(refreshTime))
   outputFile.write('\t{0:14d}   ; Retry time: time for retrying failed zone transfer (default: 600)\n'.format(retryTime))
   outputFile.write('\t{0:14d}   ; Expire time: when to expire a zone in case of failed zone transfer (default: 84600)\n'.format(expireTime))
   outputFile.write('\t{0:14d} ) ; Minimum TTL: minimum time-to-live (default: 3600)\n\n'.format(minTTL))
   outputFile.write('@\tIN\tNS\t' + nsHostNameFQDN + '\n')
   for slave in slaves:
      outputFile.write('@\tIN\tNS\t' + slave + '\n')
   outputFile.write('\n')


# ###### Write RR ###########################################################
def writeRR(outputFile, hostNameFQDN, record, value):
   outputFile.write('{0:42s}'.format(hostNameFQDN) + '\tIN\t' +
                    record + '\t' + value + '\n')


# ###### Write LOC RR #######################################################
def writeLOC(siteZoneFile, name, localSite):
   writeRR(siteZoneFile,
           name,
           'LOC',
           getLocString(localSite['site_latitude'],
                        localSite['site_longitude'],
                        localSite['site_altitude'],
                        5, 25))


# ###### Write zone configuration ###########################################
def writeZone(outputFile, zone, zoneFileName, masterSite):
   outputFile.write('zone "' + zone + '" IN {\n')
   if masterSite == None:
      outputFile.write('\ttype master;\n')
      outputFile.write('\tfile "/etc/bind/' + zoneFileName + '";\n')
      outputFile.write('\tallow-update { none; };\n')
      outputFile.write('\tallow-transfer { ')
      for version in [ 4, 6 ]:
         outputFile.write(str(makeNorNetIP(0, 0, 0, 0, version)) + '; ')
         outputFile.write(str(makeNorNetTunnelIP(0, 0, 0, 0, version)) + '; ')
      outputFile.write('};\n')
   else:
      outputFile.write('\ttype slave;\n')
      outputFile.write('\tfile "/var/cache/bind/slaves/' + zoneFileName + '";\n')
      outputFile.write('\tmasters { ')
      for version in [ 4, 6 ]:
         outputFile.write(str(makeNorNetIP(masterSite['site_default_provider_index'],
                                           masterSite['site_index'],
                                           NorNet_NodeIndex_Tunnelbox,
                                           -1, version).ip) + '; ')
      outputFile.write('};\n')
   outputFile.write('};\n\n')


# ###### Get NorNet node object for additional DNS entry ####################
def makeNodeForDNS(nodeName, site, nodeIndex, model, type, options):
   dnsName = makeNameFromUnicode(nodeName)
   v4Only = 0
   v6Only = 0
   for option in options:
      if option == 'v4only':
         v4Only = 1
      elif option == 'def-v4only':
         v4Only = 2
      if option == 'v6only':
         v6Only = 1
      elif option == 'def-v6only':
         v6Only = 2
   norNetNode = {
      'node_site_id'          : site['site_index'],
      'node_index'            : nodeIndex,
      'node_name'             : dnsName['ascii'] + '.' + site['site_domain'],
      'node_utf8'             : dnsName['utf8']  + '.' + site['site_domain'],
      'node_nornet_interface' : None,
      'node_model'            : model,
      'node_type'             : type,
      'node_state'            : 'MANUAL',
      'node_v4only'           : v4Only,
      'node_v6only'           : v6Only,
      'node_tags'             : []
   }
   return norNetNode


# ###### Get list of slave servers ##########################################
def getSlavesForSite(fullSiteList, localSite):
   slaves = [ ]
   for remoteSiteIndex in fullSiteList:
      remoteSite = fullSiteList[remoteSiteIndex]
      if ( ((localSite['site_index'] == NorNet_SiteIndex_Central) and
            (remoteSite['site_index'] != localSite['site_index'])) or
           ((localSite['site_index'] != NorNet_SiteIndex_Central) and
            (remoteSite['site_index'] == NorNet_SiteIndex_Central)) ):
         #for version in [ 4, 6 ]:
            #address = makeNorNetIP(remoteSite['site_default_provider_index'],
                                   #remoteSite['site_index'],
                                   #NorNet_NodeIndex_Tunnelbox, -1, version)
         slaves.append('ns.' + remoteSite['site_domain'] + '.')
   return slaves


# ###### Check whether to include node for given provider and IP version ####
def includeNodeIP(node, localSite, providerIndex, version):
   if ((node['node_v6only'] > 0) and (version == 4)):
      return False
   elif ((node['node_v6only'] > 1) and (providerIndex != localSite['site_default_provider_index'])):
      return False
   elif ((node['node_v4only'] > 0) and (version == 6)):
      return False
   elif ((node['node_v4only'] > 1) and (providerIndex != localSite['site_default_provider_index'])):
      return False
   return True


# ###### Generate hosts configuration #######################################
def makeBindConfiguration(fullSiteList, fullNodeList, localSite, hostName, additionalNodes = []):
   localSiteIndex    = localSite['site_index']
   localProviderList = getNorNetProvidersForSite(localSite)
   siteFQDN          = localSite['site_domain'] + '.'
   defaultTTL        = 24*3600
   minTTL            =    3600
   refreshTime       =     900
   retryTime         =      60
   expireTime        =   84600

   # ====== Get hostname in default provider's network ======================
   localDefaultProvider       = localProviderList[localSite['site_default_provider_index']]
   hostNameForDefaultProvider = addProviderToName(hostName + '.' + siteFQDN, str.lower(localDefaultProvider['provider_short_name']))

   siteZoneFile = codecs.open(siteFQDN + 'db', 'w', 'utf-8')
   writeAutoConfigInformation(siteZoneFile, ';')
   slaveServers = getSlavesForSite(fullSiteList, localSite)
   writeSOA(siteZoneFile, hostNameForDefaultProvider, siteFQDN, refreshTime, retryTime, expireTime, minTTL, defaultTTL, slaveServers)

   # ====== Some useful aliases =============================================
   if hostName != 'tunnelbox':
      writeRR(siteZoneFile, 'tunnelbox.' + siteFQDN, 'CNAME', hostNameForDefaultProvider)
   if hostName != 'ntp':
      writeRR(siteZoneFile, 'ntp.' + siteFQDN, 'CNAME', hostNameForDefaultProvider)
   if hostName != 'ns':
      writeRR(siteZoneFile, 'ns.' + siteFQDN, 'CNAME', hostNameForDefaultProvider)

   # ====== Prepare the list of hosts =======================================
   fullNodeList.append(makeNodeForDNS(hostName, localSite, NorNet_NodeIndex_Tunnelbox,
                       'Amiga 6000', 'NorNet Tunnelbox', []))
   fullNodeList = fullNodeList + additionalNodes
   # Sort by node index
   def nodeSortingOrder(a, b):
      return cmp(a['node_index'], b['node_index'])
   fullNodeList.sort(nodeSortingOrder)


   # ====== Write forward lookup configuration ==============================
   for node in fullNodeList:
      siteZoneFile.write('\n; ====== ' + node['node_name'] + ' ======\n')
      for phase in [ 1, 2, 3 ]:
         for localProviderIndex in localProviderList:
            localProvider = localProviderList[localProviderIndex]

            # ====== Add internal addresses =================================
            for version in [ 4, 6 ]:
               # ====== Skip unsupported address family =====================
               nodeAddress = makeNorNetIP(localProviderIndex, localSiteIndex, node['node_index'], -1, version)
               # ====== Hostname for default provider's address =============
               if phase == 1:
                  if localProviderIndex == localSite['site_default_provider_index']:
                     if version == 6:   # Just add entry once!
                        writeRR(siteZoneFile, node['node_name'] + '.', 'CNAME',
                                addProviderToName(node['node_name'],
                                                  str.lower(localProvider['provider_short_name'])) + '.')                                                    
                        # ====== Special aliases () ============================
                        # For PLC, Monitor, File Server
                        if ((localSite['site_index'] == NorNet_SiteIndex_PLC) and
                            (node['node_index'] == NorNet_NodeIndex_PLC) and
                            (node['node_name'] != 'plc')):
                           writeRR(siteZoneFile, 'plc.' + siteFQDN, 'CNAME',
                                   addProviderToName(node['node_name'],
                                                     str.lower(localProvider['provider_short_name'])) + '.')                                                    
                        if ((localSite['site_index'] == NorNet_SiteIndex_Monitor) and
                            (node['node_index'] == NorNet_NodeIndex_Monitor) and
                            (node['node_name'] != 'monitor')):
                           writeRR(siteZoneFile, 'monitor.' + siteFQDN, 'CNAME',
                                   addProviderToName(node['node_name'],
                                                     str.lower(localProvider['provider_short_name'])) + '.')                                                    
                           writeRR(siteZoneFile, siteFQDN, 'MX',
                                   '10 ' + addProviderToName(node['node_name'],
                                                             str.lower(localProvider['provider_short_name'])) + '.')                                                    
                        if ((localSite['site_index'] == NorNet_SiteIndex_FileSrv) and
                            (node['node_index'] == NorNet_NodeIndex_FileSrv)):
                           if (node['node_name'] != 'nfs'):
                              writeRR(siteZoneFile, 'nfs.' + siteFQDN, 'CNAME',
                                      addProviderToName(node['node_name'],
                                                        str.lower(localProvider['provider_short_name'])) + '.')                                                    
                           if (node['node_name'] != 'tftp'):
                               writeRR(siteZoneFile, 'tftp.' + siteFQDN, 'CNAME',
                                       addProviderToName(node['node_name'],
                                                         str.lower(localProvider['provider_short_name'])) + '.')                                                    
               # ====== Hostname for current provider's address =============
               elif phase == 2:
                  if includeNodeIP(node, localSite, localProviderIndex, version):
                     writeRR(siteZoneFile,
                             addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.',
                             rrTypeForAddress(nodeAddress),
                             str(nodeAddress.ip))
                  # if localProviderIndex == localSite['site_default_provider_index']:
                  if version == 6:   # Just add entry once!
                     writeRR(siteZoneFile,
                             addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.',
                             'HINFO', '"' + node['node_model'] + '/' + localProvider['provider_long_name'] + '" "' + node['node_type'] + '"')
                     writeLOC(siteZoneFile,
                              addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.',
                              localSite)
               # ====== Hostname with *all* addresses =======================
               else:
                  if includeNodeIP(node, localSite, localProviderIndex, version):
                     writeRR(siteZoneFile,
                             addProviderToName(node['node_name'], 'all') + '.',
                             rrTypeForAddress(nodeAddress),
                             str(nodeAddress.ip))

      # ====== Punycode CNAMEs for IDN names ================================
      if unicode(node['node_name']) != node['node_utf8']:
         for localProviderIndex in localProviderList:
            localProvider = localProviderList[localProviderIndex]
            writeRR(siteZoneFile,
                    addProviderToName(node['node_utf8'].encode('idna'), str.lower(localProvider['provider_short_name'])) + '.',
                    'CNAME',
                    addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.')
            if localProviderIndex == localSite['site_default_provider_index']:
               writeRR(siteZoneFile,
                       node['node_utf8'].encode('idna'),
                       'CNAME',
                       addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.')
         writeRR(siteZoneFile,
                 addProviderToName(node['node_utf8'].encode('idna'), 'all') + '.',
                 'CNAME',
                 addProviderToName(node['node_name'], 'all') + '.')

      # ====== Add external addresses of tunnelbox ==========================
      for localProviderIndex in localProviderList:
         localProvider = localProviderList[localProviderIndex]
         if node['node_index'] == NorNet_NodeIndex_Tunnelbox:
            writeRR(siteZoneFile,
                    addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name']) + '-ext') + '.',
                    'A', str(localProvider['provider_tunnelbox_ipv4']))
            if localProvider['provider_tunnelbox_ipv6'] != IPv6Address('::'):
               writeRR(siteZoneFile,
                       addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name']) + '-ext') + '.',
                       'AAAA', str(localProvider['provider_tunnelbox_ipv6']))

   if localSiteIndex == NorNet_SiteIndex_Central:
      # ====== Tunnels ======================================================
      for localProviderIndex in localProviderList:
         localProvider = localProviderList[localProviderIndex]
         siteZoneFile.write('\n; ====== ' + localProvider['provider_long_name'] + ' Tunnels ======\n')

         for remoteSiteIndex in fullSiteList:
            if remoteSiteIndex != localSiteIndex:
               remoteSite = fullSiteList[remoteSiteIndex]
               remoteProviderList = getNorNetProvidersForSite(remoteSite)
               for remoteProviderIndex in remoteProviderList:
                  remoteProvider = remoteProviderList[remoteProviderIndex]
                  for version in [ 4, 6 ]:
                     localTunnelIP  = makeNorNetTunnelIP(localSiteIndex, localProviderIndex,
                                                         remoteSiteIndex, remoteProviderIndex,
                                                         version)
                     remoteTunnelIP = makeNorNetTunnelIP(remoteSiteIndex, remoteProviderIndex,
                                                         localSiteIndex, localProviderIndex,
                                                         version)
                     localName  = 'local.' + \
                                  str.lower(remoteProvider['provider_short_name']) + '.' + str.lower(remoteSite['site_short_name']) + '.' + \
                                  str.lower(localProvider['provider_short_name'])  + '.' + str.lower(localSite['site_domain']) + '.'
                     remoteName = 'remote.' + \
                                  str.lower(remoteProvider['provider_short_name']) + '.' + str.lower(remoteSite['site_short_name']) + '.' + \
                                  str.lower(localProvider['provider_short_name'])  + '.' + str.lower(localSite['site_domain']) + '.'

                     writeRR(siteZoneFile, localName,
                             rrTypeForAddress(localTunnelIP), str(localTunnelIP.ip))
                     writeRR(siteZoneFile, localName,
                             'HINFO', '"Tunnel Endpoint at ' + localSite['site_long_name'] + '/' + localProvider['provider_long_name'] + '" ' +
                             '"Remote Endpoint at ' + remoteSite['site_long_name'] + '/' + remoteProvider['provider_long_name'] + '"')
                     writeLOC(siteZoneFile, localName, localSite)

                     writeRR(siteZoneFile, remoteName,
                             rrTypeForAddress(remoteTunnelIP), str(remoteTunnelIP.ip))
                     writeRR(siteZoneFile, localName,
                             'HINFO', '"Tunnel Endpoint at ' + remoteSite['site_long_name'] + '/' + remoteProvider['provider_long_name'] + '" ' +
                             '"Remote Endpoint at ' + localSite['site_long_name'] + '/' + localProvider['provider_long_name'] + '"')
                     writeLOC(siteZoneFile, remoteName, remoteSite)

                     siteZoneFile.write('\n')

   siteZoneFile.close()


   # ====== Write reverse lookup configuration ==============================
   for localProviderIndex in localProviderList:
      localProvider = localProviderList[localProviderIndex]
      for version in [ 4, 6 ]:
         providerNetwork  = makeNorNetIP(localProviderIndex, localSiteIndex, 0, 0, version)
         providerZone     = getZoneForAddress(providerNetwork, providerNetwork.prefixlen)
         providerZoneFile = codecs.open(localProvider['provider_short_name'] + '.' + siteFQDN + 'ipv' + str(version) + '.db', 'w', 'utf-8')
         writeSOA(providerZoneFile, hostNameForDefaultProvider, siteFQDN, refreshTime, retryTime, expireTime, minTTL, defaultTTL, slaveServers)

         for node in fullNodeList:
            if not includeNodeIP(node, localSite, localProviderIndex, version):
               continue
            providerAddress = makeNorNetIP(localProviderIndex, localSiteIndex, node['node_index'], -1, version)
            prefixLength    = 32
            if version == 6:
               prefixLength = 128
            writeRR(providerZoneFile,
                    getZoneForAddress(providerAddress, prefixLength),
                    'PTR', addProviderToName(node['node_name'], str.lower(localProvider['provider_short_name'])) + '.')

         providerZoneFile.close()

   # ====== Write reverse lookup configuration for tunnels ==================
   if localSiteIndex == NorNet_SiteIndex_Central:
      for version in [ 4, 6 ]:
         tunnelNetwork  = makeNorNetTunnelIP(0, 0, 0, 0, version)
         tunnelZone     = getZoneForAddress(tunnelNetwork, tunnelNetwork.prefixlen)
         tunnelZoneFile = codecs.open('tunnels.ipv' + str(version) + '.db', 'w', 'utf-8')
         writeSOA(tunnelZoneFile, hostNameForDefaultProvider, siteFQDN, refreshTime, retryTime, expireTime, minTTL, defaultTTL, slaveServers)
         prefixLength   = 32
         if version == 6:
            prefixLength = 128

         for localProviderIndex in localProviderList:
            localProvider = localProviderList[localProviderIndex]
            tunnelZoneFile.write('\n; ====== ' + localProvider['provider_long_name'] + ' Tunnels ======\n')

            for remoteSiteIndex in fullSiteList:
               if remoteSiteIndex != localSiteIndex:
                  remoteSite = fullSiteList[remoteSiteIndex]
                  remoteProviderList = getNorNetProvidersForSite(remoteSite)
                  for remoteProviderIndex in remoteProviderList:
                     remoteProvider = remoteProviderList[remoteProviderIndex]

                     localTunnelIP  = makeNorNetTunnelIP(localSiteIndex, localProviderIndex,
                                                         remoteSiteIndex, remoteProviderIndex,
                                                         version)
                     remoteTunnelIP = makeNorNetTunnelIP(remoteSiteIndex, remoteProviderIndex,
                                                         localSiteIndex, localProviderIndex,
                                                         version)

                     writeRR(tunnelZoneFile,
                             getZoneForAddress(localTunnelIP.ip, prefixLength),
                             'PTR',
                             'local.' +
                             str.lower(remoteProvider['provider_short_name']) + '.' + str.lower(remoteSite['site_short_name']) + '.' +
                             str.lower(localProvider['provider_short_name'])  + '.' + str.lower(localSite['site_domain']) + '.')
                     writeRR(tunnelZoneFile,
                             getZoneForAddress(remoteTunnelIP.ip, prefixLength),
                             'PTR',
                             'remote.' +
                             str.lower(remoteProvider['provider_short_name']) + '.' + str.lower(remoteSite['site_short_name']) + '.' +
                             str.lower(localProvider['provider_short_name'])  + '.' + str.lower(localSite['site_domain']) + '.')

         tunnelZoneFile.close()


   # ====== Write zone configuration ========================================
   zoneConfFile = codecs.open('zones.conf', 'w', 'utf-8')
   writeAutoConfigInformation(zoneConfFile, '//')
   for siteIndex in fullSiteList:
      site       = fullSiteList[siteIndex]
      masterSite = site
      if siteIndex == localSiteIndex:
         masterSite = None

      zoneConfFile.write('// ====== ' + site['site_long_name'] + ' ======\n')
      writeZone(zoneConfFile, site['site_domain'], site['site_domain'] + '.db', masterSite)

      siteProviderList = getNorNetProvidersForSite(site)
      for siteProviderIndex in siteProviderList:
         siteProvider = siteProviderList[siteProviderIndex]
         for version in [ 4, 6 ]:
            providerNetwork = makeNorNetIP(siteProviderIndex, siteIndex, 0, 0, version)
            providerZone = getZoneForAddress(providerNetwork, providerNetwork.prefixlen)
            writeZone(zoneConfFile,
                      providerZone,
                      siteProvider['provider_short_name'] + '.' + site['site_domain'] + '.ipv' + str(version) + '.db',
                      masterSite)

   zoneConfFile.write('\n// ====== Tunnel IP Reverse Lookup ======\n')
   # The Central Site tunnelbox is master for the reverse lookup of the tunnel IPs.
   if localSiteIndex == NorNet_SiteIndex_Central:
      masterSite = None
   else:
      masterSite = fullSiteList[NorNet_SiteIndex_Central]
   for version in [ 4, 6 ]:
      tunnelNetwork  = makeNorNetTunnelIP(0, 0, 0, 0, version)
      tunnelZone     = getZoneForAddress(tunnelNetwork, tunnelNetwork.prefixlen)
      writeZone(zoneConfFile, tunnelZone, 'tunnels.ipv' + str(version) + '.db',
                masterSite)

   zoneConfFile.close()


# ###### Generate DHCP daemon configuration #################################
def makeDHCPDConfiguration(localSite, dynamicStart, dynamicEnd, staticList):
   domain        = localSite['site_domain']
   providerIndex = localSite['site_default_provider_index']   
   siteIndex     = localSite['site_index']
   siteNetwork   = makeNorNetIP(providerIndex, siteIndex, 0, 0, 4)
   siteTunnelbox = makeNorNetIP(providerIndex, siteIndex, NorNet_NodeIndex_Tunnelbox, -1, 4)

   outputFile = codecs.open('dhcpd-config', 'w', 'utf-8')
   writeAutoConfigInformation(outputFile)

   outputFile.write('ddns-updates               off;\n')
   outputFile.write('option domain-name         "' + domain + '";\n')
   outputFile.write('option domain-name-servers ' + str(siteTunnelbox.ip) + ';\n')
   outputFile.write('default-lease-time         3600;\n')
   outputFile.write('max-lease-time             86400;\n')
   outputFile.write('allow                      booting;\n')
   outputFile.write('allow                      bootp;\n\n')
   outputFile.write('authoritative;\n\n')
   
   outputFile.write('subnet ' + str(siteNetwork.ip) + ' netmask ' + str(siteNetwork.netmask) + ' { \n')
   if ((dynamicStart > 1) and (dynamicEnd <= 255) and (dynamicEnd >= dynamicStart)):
      outputFile.write('\trange ' + 
                     str(makeNorNetIP(providerIndex, siteIndex, dynamicStart, -1, 4).ip) + ' ' +
                     str(makeNorNetIP(providerIndex, siteIndex, dynamicEnd, -1, 4).ip) + ' ' +                    
                     ';\n')
   outputFile.write('\toption routers ' + str(siteTunnelbox.ip) + ';\n')
   outputFile.write('}\n')
   
   for staticEntry in staticList:
      outputFile.write('\nhost node' + str(staticEntry['node_index']) + ' {\n')
      outputFile.write('\thardware ethernet ' + staticEntry['node_mac'] + ';\n')
      outputFile.write('\tfixed-address     ' + str(makeNorNetIP(providerIndex, siteIndex, staticEntry['node_index'], -1, 4).ip) + ';\n')
      if len(staticEntry['node_filename']) > 0:
         outputFile.write('\tfilename          "' + staticEntry['node_filename'] + '";\n')
         if staticEntry['node_servername'] != '':
            # outputFile.write('\tserver-name       "' + staticEntry['node_servername'] + '";\n')
            outputFile.write('\tnext-server       ' + staticEntry['node_servername'] + ';\n')
         else:
            # outputFile.write('\tserver-name       "tftp.' + NorNet_CentralSite_DomainName + '";\n')
            outputFile.write('\tnext-server       tftp.' + NorNet_CentralSite_DomainName + ';\n')
      outputFile.write('}\n')

   outputFile.close()


# ###### Get ID for routing table ###########################################
def getTableID(opIndex):
   return 1000000 + opIndex


# ###### Get preference for routing table ###################################
def getTablePref(opIndex, level):
   return 1000 + (1000 * level) + opIndex


# ###### Make IPv6 link-local address for GRE tunnel ########################
def makeGRELinkLocal(a, b):
   result = IPv6Network('fe80::' + \
                        str.replace(hex((int(a) >> 16) & 0xffff), '0x', '') + ':' + \
                        str.replace(hex(int(a) & 0xffff),         '0x', '') + ':' + \
                        str.replace(hex((int(b) >> 16) & 0xffff), '0x', '') + ':' + \
                        str.replace(hex(int(b) & 0xffff),         '0x', '') + \
                        '/64')
   return(result)


# ###### Add routes to remote tunnel endpoints ##############################
def makeRemoteTunnelRoutesOnCentralRouter(fullSiteList, outputFile, nextHopInterface, nextHopAddress, remoteSite, version):
   outgoingProviderList = getNorNetProvidersForSite(remoteSite)
   for outgoingProviderIndex in outgoingProviderList:
      outgoingProvider = outgoingProviderList[outgoingProviderIndex]
      for peerSiteIndex in fullSiteList:
         if peerSiteIndex == NorNet_SiteIndex_Central:   # Not to central site
            continue
         if peerSiteIndex == remoteSite['site_index']:   # Not the remote site
            continue
         peerSite         = fullSiteList[peerSiteIndex]
         peerProviderList = getNorNetProvidersForSite(peerSite)

         for incomingProviderIndex in peerProviderList:
            incomingProvider = peerProviderList[incomingProviderIndex]
            tunnel           = getTunnel(remoteSite, outgoingProvider, peerSite, incomingProvider, version)

            if tunnel['tunnel_local_inner_address'].ip < tunnel['tunnel_remote_inner_address'].ip:
               # Route over remote site, but only if the "lower" side of the tunnel is on this site!
               outputFile.write('   make-route ' + \
                                      'main ' + \
                                      str(tunnel['tunnel_local_inner_address'].network) + '/' + str(tunnel['tunnel_local_inner_address'].prefixlen) + ' ' + \
                                      nextHopInterface + ' ' + \
                                      str(nextHopAddress) + '   && \\\n')



# ###### Generate tunnelbox configuration for given provider ################
def makeTunnelboxProvider(fullSiteList, localSite, localProviderList, localProvider, pathNumber, configNamePrefix):
   if configNamePrefix == None:
      configNamePrefix = 'tunnelbox-' + localSite['site_short_name']
   configurationName = configNamePrefix + '-' + localProvider['provider_short_name'] + '-config'
   outputFile = makeConfigFile('Tunnelbox-Provider', configurationName, True)
   log('Making tunnelbox provider configuration for ' + \
       localSite['site_long_name'] + '/' + localProvider['provider_long_name'] + ' ...')

   localSiteIndex     = localSite['site_index']
   localProviderIndex = localProvider['provider_index']
   stateList          = [ 'stop', 'start', 'status' ]
   for state in stateList:
      if ((state == 'start') or (state == 'stop')):
         outputFile.write('if [ "$state" = "' + state + '" -o "$state" = "restart" ] ; then\n')
         if state == 'start':
            outputFile.write('   if [ "$state" = "restart" ] ; then\n')
            outputFile.write('      log-summary\n')
            outputFile.write('   fi\n')
      else:
         outputFile.write('if [ "$state" = "' + state + '" ] ; then\n')

      # ====== Create provider-specific routing table =======================
      action = ''
      if (state == 'start'):
         action = 'Setting up'
      elif (state == 'stop'):
         action = 'Tearing down'
      elif (state == 'status'):
         action = 'Checking'
      outputFile.write('   log "' + action + ' connectivity for provider ' + \
                       localProvider['provider_long_name'] + ' ..."\n')

      routingTableID         = getTableID(localProviderIndex)
      routingTableDestPref   = getTablePref(localProviderIndex, 0)
      routingTableTOSPref    = getTablePref(localProviderIndex, 1)
      routingTableSourcePref = getTablePref(localProviderIndex, 2)

      if (state == 'start'):
         if pathNumber + 1 < len(NorNet_TOSSettings):
            routingTableTOS = NorNet_TOSSettings[pathNumber + 1]
         else:
            routingTableTOS = 0x00

         outputFile.write('   log-action "Creating rules and tables for provider ' + \
                          localProvider['provider_long_name'] + ' ..."\n')
         outputFile.write('   make-table ' + str(routingTableID) + '   # ' + \
                          localProvider['provider_long_name'] + ' table   && \\\n')

         # ====== Destination rules =========================================
         # For directly connected NorNet networks, skip further rules and go
         # to "main" table instead!
         providerList = getNorNetProvidersForSite(localSite)
         for version in [ 4, 6 ]:
            fullNorNetNetwork    = makeNorNetIP(0, 0, 0, 0, version)
            localProviderNetwork = makeNorNetIP(localProviderIndex, localSiteIndex, 0, 0, version)
            outputFile.write('   add-table-selector main ' + str(routingTableDestPref) + \
                             ' to ' + str(localProviderNetwork) + '   && \\\n')

            # ====== TOS rule ===============================================
            # If TOS is set, select outgoing provider accordingly
            if routingTableTOS != 0x00:
               outputFile.write('   add-table-selector ' + str(routingTableID) + ' ' + str(routingTableTOSPref) + \
                                ' from ' + str(fullNorNetNetwork) + \
                                ' tos ' + hex(routingTableTOS) + \
                                ' to ' + str(fullNorNetNetwork) + '   && \\\n')

         # ====== Source rules ==============================================
         # Otherwise, use source address to determine the outgoing provider.
         for version in [ 4, 6 ]:
            fullNorNetNetwork    = makeNorNetIP(0, 0, 0, 0, version)
            localProviderNetwork = makeNorNetIP(localProviderIndex, 0, 0, 0, version)
            outputFile.write('   add-table-selector ' + str(routingTableID) + ' ' + str(routingTableSourcePref) + \
                             ' from ' + str(localProviderNetwork) + \
                             ' to ' + str(fullNorNetNetwork) + '   && \\\n')

      elif (state == 'stop'):
         outputFile.write('   log-action "Removing rules and tables for provider ' + \
                          localProvider['provider_long_name'] + ' ..."\n')
         outputFile.write('   remove-table ' + str(routingTableID) + '   && \\\n')
         for version in [ 4, 6 ]:
            localProviderNetwork = makeNorNetIP(localProviderIndex, localSiteIndex, 0, 0, version)
            outputFile.write('   remove-table-selector main ' + str(routingTableDestPref) + \
                             ' to ' + str(localProviderNetwork) + '   && \\\n')

      if ((state == 'start') or (state == 'stop')):
         outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')


      # ====== Create provider-specific tunnels and routes ==================
      for remoteSiteIndex in fullSiteList:
         if remoteSiteIndex == localSiteIndex:
            continue
         remoteSite         = fullSiteList[remoteSiteIndex]
         remoteProviderList = getNorNetProvidersForSite(remoteSite)
         outputFile.write('   # ------ ' + localSite['site_long_name'] + \
                          ' (' + str(localSite['site_index']) + ') <-> ' + \
                          remoteSite['site_long_name'] + \
                          ' (' + str(remoteSite['site_index']) + ') ------\n')

         for remoteProviderIndex in remoteProviderList:
            remoteProvider = remoteProviderList[remoteProviderIndex]
            outputFile.write('   # ~~~~~~ ' + remoteProvider['provider_long_name'] + \
                             ' (' + str(remoteProvider['provider_index']) + ') ~~~~~~\n')
            if ((state == 'start') or (state == 'stop') or (state == 'status')):
               outputFile.write('   log "' + action + ' tunnels with ' + \
                                remoteSite['site_long_name'] + ' via [' + \
                                localProvider['provider_long_name'] + ' <--> ' + \
                                remoteProvider['provider_long_name'] + ']:"\n')

            for version in [ 4, 6 ]:
               tunnel        = getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
               remoteNetwork = makeNorNetIP(remoteProviderIndex, remoteSiteIndex, 0, 0, version)

               outputFile.write('   log-action "Tunnel ' + tunnel['tunnel_interface'] + ': ' + \
                                str(tunnel['tunnel_local_inner_address'].ip)  + ' <--> ' + \
                                str(tunnel['tunnel_remote_inner_address'].ip) + '"\n')

               # ====== Create tunnels ======================================
               if (state == 'start'):
                  options = ''
                  if ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     options = '--add-to-existing-tunnel'
                  elif ((version == 4) and (re.match('^gre', tunnel['tunnel_interface']))):
                     options = '--v6-linklocal ' + str(makeGRELinkLocal(IPv4Address(tunnel['tunnel_local_outer_address']),
                                                                        IPv4Address(tunnel['tunnel_remote_outer_address'])))
                  outputFile.write('   make-tunnel ' + \
                                   tunnel['tunnel_interface']                 + ' ' + \
                                   hex(tunnel['tunnel_key'])                  + ' ' + \
                                   str(tunnel['tunnel_local_outer_address'])  + ' ' + \
                                   str(tunnel['tunnel_remote_outer_address']) + ' ' + \
                                   str(tunnel['tunnel_local_inner_address'].ip)  + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address'].ip) + ' ' + \
                                   '"' + options + '" && \\\n')
               elif (state == 'stop'):
                  if not ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     outputFile.write('   remove-tunnel ' + \
                                      tunnel['tunnel_interface'] + ' ' + \
                                      hex(tunnel['tunnel_key'])  + '   && \\\n')
               elif (state == 'status'):
                  outputFile.write('   show-tunnel ' + \
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_local_inner_address'].ip) + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address'].ip) + ' "' + \
                                   localSite['site_long_name'] + \
                                   str(localSite['site_index']) + ' <-> ' + \
                                   remoteSite['site_long_name'] + \
                                   ' (' + str(remoteSite['site_index']) + ') via [' + \
                                   remoteProvider['provider_long_name'] + \
                                   ' (' + str(remoteProvider['provider_index']) + ') <--> ' + \
                                   localProvider['provider_long_name'] + \
                                   ' (' + str(localProvider['provider_index']) + ')]"   && \\\n')


               # ====== Create routing table entries ========================
               if (state == 'start'):
                  # ====== Entry into provider-specific routing table =======
                  outputFile.write('   make-route ' + \
                                   str(routingTableID) + ' ' +
                                   str(remoteNetwork) + ' ' +
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address'].ip) + '   && \\\n')

                  # ====== Entry into global routing table ==================
                  metric = 10 + pathNumber
                  if remoteProviderIndex == localProviderIndex:
                     metric = 5
                  outputFile.write('   make-route ' + \
                                   'main ' +
                                   str(remoteNetwork) + ' ' +
                                   tunnel['tunnel_interface'] + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address'].ip) + ' ' + \
                                   'metric ' + str(metric) + '   && \\\n')

               # ====== Create routes for remote tunnel addresses ===========
               if ((state == 'start') and
                   (localSiteIndex == NorNet_SiteIndex_Central) and
                   (localProviderIndex == localSite['site_default_provider_index']) and
                   (remoteProviderIndex == remoteSite['site_default_provider_index'])):
                  makeRemoteTunnelRoutesOnCentralRouter(fullSiteList, outputFile,
                                                        tunnel['tunnel_interface'],
                                                        tunnel['tunnel_remote_inner_address'].ip,
                                                        remoteSite, version),


               outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')


      # ====== Default route to central site ================================
      if ((localSiteIndex != NorNet_SiteIndex_Central) and
          (localProviderIndex == localSite['site_default_provider_index'])):
         routingTableID       = getTableID(256)
         routingTableDestPref = getTablePref(256, 4)
         if (state == 'start'):
            outputFile.write('   log "Setting up DEFAULT route to central site"\n')
            outputFile.write('   make-table ' + str(routingTableID) + '   # DEFAULT to CENTRAL SITE\n')
            for version in [ 4, 6 ]:
               defaultTunnel     = getDefaultTunnel(fullSiteList, localSite, version)
               fullNorNetNetwork = makeNorNetIP(0, 0, 0, 0, version)

               outputFile.write('   add-table-selector ' + str(routingTableID) + ' ' + str(routingTableDestPref) + \
                                ' from ' + str(fullNorNetNetwork) + '\n')
               outputFile.write('   make-route ' + \
                                str(routingTableID) + ' ' +
                                'default ' +
                                defaultTunnel['tunnel_interface'] + ' ' + \
                                str(defaultTunnel['tunnel_remote_inner_address'].ip) + '\n')

         elif (state == 'stop'):
            outputFile.write('   log "Tearing down DEFAULT route to central site"\n')
            outputFile.write('   remove-table ' + str(routingTableID) + '\n')


      # ====== Use main table to access tunnel endpoints ====================
      routingTableDestPref = 256
      for version in [ 4, 6 ]:
         fullTunnelNet = makeNorNetTunnelIP(0, 0, 0, 0, version)
         if (state == 'start'):
            outputFile.write('   add-table-selector main ' + str(routingTableDestPref) + \
                             ' to ' + str(fullTunnelNet) + '\n')
            outputFile.write('   add-table-selector main ' + str(routingTableDestPref) + \
                             ' from ' + str(fullTunnelNet) + '\n')
         elif (state == 'stop'):
            outputFile.write('   remove-table-selector main ' + str(routingTableDestPref) + \
                             ' to ' + str(fullTunnelNet) + '\n')
            outputFile.write('   remove-table-selector main ' + str(routingTableDestPref) + \
                             ' from ' + str(fullTunnelNet) + '\n')


      outputFile.write('   log-action "' + action + ' connectivity for provider ' + \
                       localProvider['provider_long_name'] + ' finished"\n')

      outputFile.write('fi\n\n')
      pathNumber = pathNumber + 1


   outputFile.write('log-summary-and-return-result\n')
   pathNumber = pathNumber + 1

   outputFile.close()
   return configurationName


# ###### Generate tunnelbox configuration for local network #################
def makeTunnelboxNetwork(outputFile, state, localInterface,
                          localProvider, localSiteIndex):
   localProviderIndex = localProvider['provider_index']

   action = ''
   if (state == 'start'):
      action = 'Setting up'
   elif (state == 'stop'):
      action = 'Tearing down'
   outputFile.write('\n      log-action "' + action + ' local networks for ' + \
                    localProvider['provider_long_name'] + ' ..."\n')

   for version in [ 4, 6 ]:
      localAddress = makeNorNetIP(localProviderIndex, localSiteIndex, NorNet_NodeIndex_Tunnelbox, -1, version)
      if state == 'start':
         outputFile.write('      make-address ' + localInterface + ' ' + str(localAddress) + '   && \\\n')
      elif state == 'stop':
         outputFile.write('      remove-address ' + localInterface + ' ' + str(localAddress) + '   && \\\n')

   outputFile.write('      log-result $RESULT_GOOD || log-result $RESULT_BAD\n')


# ###### Generate tunnelbox bootstrap configuration for local network #######
def makeTunnelboxBootstrap(localSiteIndex, localProviderIndex, localInterface, localAddress, configNamePrefix):
   localSite = {
      'site_index'              : localSiteIndex,
      'site_long_name'          : 'My Site',
      'site_short_name'         : 'MS'
   }
   localProvider = {
      'provider_index'          : localProviderIndex,
      'provider_long_name'      : 'Local Provider',
      'provider_short_name'     : 'local',
      'provider_tunnelbox_ipv4' : localAddress
   }
   remoteSite = {
      'site_index'              : NorNet_SiteIndex_Central,
      'site_long_name'          : 'Central Site',
      'site_short_name'         : 'NN'
   }
   remoteProvider = {
      'provider_index'          : NorNet_CentralSite_BootstrapProviderIndex,
      'provider_long_name'      : 'Local Provider',
      'provider_short_name'     : 'local',
      'provider_tunnelbox_ipv4' : NorNet_CentralSite_BootstrapTunnelbox
   }

   if configNamePrefix == None:
      configNamePrefix = 'tunnelbox-' + localSite['site_short_name']
   configurationName = configNamePrefix + '-bootstrap'
   outputFile = makeConfigFile('Tunnelbox', configurationName, True)
   log('Making tunnelbox bootstrap for site ' + str(localSiteIndex) + ' ...')


   # ====== Non-Central Site tunnelbox ======================================
   if localSiteIndex != NorNet_SiteIndex_Central:
      outputFile.write('\nif [ "$state" = "stop" -o "$state" = "restart" ] ; then\n')
      outputFile.write('   log-action "Tearing down tunnel to central site ..."\n')
      for version in [ 4, 6 ]:
         tunnel = getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
         if version == 4:
            v4InterfaceToPLC = tunnel['tunnel_interface']
         if ((version == 4) or (tunnel['tunnel_over_ipv4'] == False)):
            outputFile.write('   remove-tunnel ' + \
                           tunnel['tunnel_interface'] + ' ' + \
                           hex(tunnel['tunnel_key'])  + ' && \\\n')
      outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
      outputFile.write('fi\n')

      outputFile.write('\nif [ "$state" = "start" -o "$state" = "restart" ] ; then\n')
      outputFile.write('   log-action "Setting up tunnel to central site ..."\n')
      for version in [ 4, 6 ]:
         tunnel        = getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
         remoteNetwork = makeNorNetIP(remoteProvider['provider_index'], remoteSite['site_index'], 0, 0, version)
         options       = ''
         if ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
            options = '--add-to-existing-tunnel'
         elif ((version == 4) and (re.match('^gre', tunnel['tunnel_interface']))):
            options = '--v6-linklocal ' + str(makeGRELinkLocal(IPv4Address(tunnel['tunnel_local_outer_address']),
                                                               IPv4Address(tunnel['tunnel_remote_outer_address'])))
         outputFile.write('   make-tunnel ' + \
                        tunnel['tunnel_interface']                    + ' ' + \
                        hex(tunnel['tunnel_key'])                     + ' ' + \
                        str(tunnel['tunnel_local_outer_address'])     + ' ' + \
                        str(tunnel['tunnel_remote_outer_address'])    + ' ' + \
                        str(tunnel['tunnel_local_inner_address'].ip)  + ' ' + \
                        str(tunnel['tunnel_remote_inner_address'].ip) + ' ' + \
                        '"' + options + '" && \\\n')
         outputFile.write('   make-route main ' + \
                        str(remoteNetwork) + ' ' +
                        tunnel['tunnel_interface'] + ' ' + \
                        str(tunnel['tunnel_remote_inner_address'].ip) + ' ' + \
                        'metric 5   && \\\n')
      outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
      outputFile.write('fi\n')

   # ====== Central-Site tunnelbox ==========================================
   else:
      v4InterfaceToPLC = localInterface
      outputFile.write('\nif [ "$state" = "stop" -o "$state" = "restart" ] ; then\n')
      for version in [ 4, 6 ]:
         localAddress = makeNorNetIP(localProviderIndex, localSiteIndex, NorNet_NodeIndex_Tunnelbox, -1, version)
         outputFile.write('   remove-address ' + localInterface + ' ' + str(localAddress) + '   && \\\n')
      outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
      outputFile.write('fi\n')
      outputFile.write('\nif [ "$state" = "start" -o "$state" = "restart" ] ; then\n')
      for version in [ 4, 6 ]:
         localAddress = makeNorNetIP(localProviderIndex, localSiteIndex, NorNet_NodeIndex_Tunnelbox, -1, version)
         outputFile.write('   make-address ' + localInterface + ' ' + str(localAddress) + '   && \\\n')
      outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
      outputFile.write('fi\n')


   outputFile.write('\nif [ "$state" = "stop" -o "$state" = "start" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log-action "Flushing route cache ..."\n')
   outputFile.write('   ip route flush cache && \\\n')
   outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   outputFile.write('fi\n')


   outputFile.write('\nif [ "$state" = "start" -o "$state" = "restart" -o  "$state" = "status" ] ; then\n')
   outputFile.write('   log-action "Trying to contact PLC at ' + str(getPLCAddress()) + ' ..."\n')
   outputFile.write('   show-tunnel ' + v4InterfaceToPLC + ' ' + \
                    '0.0.0.0 ' + str(getPLCAddress()) + ' ""   && \\\n')
   outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   outputFile.write('fi\n\n')

   outputFile.write('\nif [ $_BadResults -gt 0 ] ; then\n')
   outputFile.write('   return 1\n')
   outputFile.write('fi\n')


# ###### Generate tunnelbox configuration ###################################
def makeTunnelboxConfiguration(fullSiteList, localSite, configNamePrefix):
   if configNamePrefix == None:
      configNamePrefix = 'tunnelbox-' + localSite['site_short_name']
   configurationName = configNamePrefix + '-providers'
   tbProvidersConfig = configurationName
   log('Making tunnelbox configuration for ' + localSite['site_long_name'] + ' ...')

   localSiteIndex    = localSite['site_index']
   localProviderList = getNorNetProvidersForSite(localSite)
   localInterface    = getTagValue(localSite['site_tags'], 'nornet_site_tb_internal_interface', '')
   if not re.match(r"^[a-z][a-z0-9-\.]*$", localInterface):
      error('Bad local interface setting for site ' + localSite['site_long_name'])
   sourceNatRange    = getTagValue(localSite['site_tags'], 'nornet_site_tb_nat_range_ipv4', '')
   fullNorNetIPv4    = makeNorNetIP(0, 0, 0, 0, 4)


   # ====== Interface to provider mappings ==================================
   outputFile = makeConfigFile('Tunnelbox ISP mapping', configurationName, True)
   outputFile.write('all_providers=\"')
   firstProvider = True
   for onlyDefault in [ True, False ]:
      for localProviderIndex in localProviderList:
         if ( ((onlyDefault == True)  and (localProviderIndex == localSite['site_default_provider_index'])) or \
              ((onlyDefault == False) and (localProviderIndex != localSite['site_default_provider_index'])) ):
            localProvider = localProviderList[localProviderIndex]
            if firstProvider == True:
               firstProvider = False
            else:
               outputFile.write(' ')
            outputFile.write(localProvider['provider_short_name'])
   outputFile.write('\"\n')

   for localProviderIndex in localProviderList:
      localProvider = localProviderList[localProviderIndex]
      outputFile.write('provider_for_if_' + \
                       str(localProvider['provider_tunnelbox_interface']).replace('-', '_') + '=' + \
                       '"' + localProvider['provider_short_name'] + '"\n')
   for localProviderIndex in localProviderList:
      localProvider = localProviderList[localProviderIndex]
      outputFile.write('if_for_provider_' + \
                       localProvider['provider_short_name'] + '=' + \
                       '"' + str(localProvider['provider_tunnelbox_interface']).replace('-', '_').replace(':', '_sub_') + '"\n')
      outputFile.write('ipv4_for_provider_' + \
                       localProvider['provider_short_name'] + '="' + \
                       str(localProvider['provider_tunnelbox_ipv4']) + '"\n')
      outputFile.write('ipv6_for_provider_' + \
                       localProvider['provider_short_name'] + '="' + \
                       str(localProvider['provider_tunnelbox_ipv6']) + '"\n')

      outputFile.write('tunnel_interfaces_for_provider_' + \
                       localProvider['provider_short_name'] + '="')
      firstInterface = True
      for remoteSiteIndex in fullSiteList:
         if remoteSiteIndex == localSiteIndex:
            continue
         remoteSite         = fullSiteList[remoteSiteIndex]
         remoteProviderList = getNorNetProvidersForSite(remoteSite)
         for remoteProviderIndex in remoteProviderList:
            remoteProvider = remoteProviderList[remoteProviderIndex]
            for version in [ 4, 6 ]:
               tunnel = getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
               if tunnel['tunnel_over_ipv4'] != True:
                  if firstInterface == True:
                     firstInterface = False
                  else:
                     outputFile.write(' ')
                  outputFile.write(tunnel['tunnel_interface'])

      outputFile.write('"\n')

   outputFile.close()


   # ====== Remove local setup ==============================================
   configurationName = configNamePrefix + '-config'
   outputFile = makeConfigFile('Tunnelbox', configurationName, True)

   outputFile.write('. ./' + tbProvidersConfig + '\n\n')

   outputFile.write('if [ "$selectedProviders" == "" ] ; then\n')
   outputFile.write('   if [ "$state" = "stop" -o "$state" = "restart" ] ; then\n')
   outputFile.write('      log "Tearing down local networks ..."\n')
   # outputFile.write('      log-action "Turning off IP forwarding ..."\n')
   # outputFile.write('      sysctl -q net.ipv4.ip_forward=0   && \\\n')
   # outputFile.write('      sysctl -q net.ipv6.conf.all.forwarding=0   && \\\n')
   outputFile.write('      log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   for localProviderIndex in localProviderList:
      makeTunnelboxNetwork(outputFile, 'stop', localInterface,
                            localProviderList[localProviderIndex], localSiteIndex)
   if localSiteIndex == NorNet_SiteIndex_Central:
      outputFile.write('\n      log-action "Turning off IPv4 NAT ..."\n')
      outputFile.write('      remove-nat ' + str(fullNorNetIPv4) + ' "' + sourceNatRange + '"   && \\\n')
      outputFile.write('      log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   outputFile.write('   fi\n')
   outputFile.write('fi\n\n')

   # ====== Configure tunnels and routing ===================================
   outputFile.write('if [ "$selectedInterfaces" != "" ] ; then\n')
   outputFile.write('   if [ "$selectedProviders" = "" ] ; then\n')
   outputFile.write('      selectedProviders=`get-providers-from-interfaces "$selectedInterfaces"`\n')
   outputFile.write('      echo "Selected providers $selectedProviders from interfaces $selectedInterfaces"\n')
   outputFile.write('   else\n')
   outputFile.write('      echo >&2 "ERROR: Either specify providers or interfaces, but *not* both!"\n')
   outputFile.write('      exit 1\n')
   outputFile.write('   fi\n')
   outputFile.write('fi\n\n\n')


   # ====== Generate per-provider configurations ============================
   pathNumber = 0
   for onlyDefault in [ True, False ]:
      for localProviderIndex in localProviderList:
         if ( ((onlyDefault == True)  and (localProviderIndex == localSite['site_default_provider_index'])) or \
              ((onlyDefault == False) and (localProviderIndex != localSite['site_default_provider_index'])) ):
            localProvider = localProviderList[localProviderIndex]
            tbpName = makeTunnelboxProvider(fullSiteList, localSite,
                                             localProviderList, localProvider,
                                             pathNumber, configNamePrefix)
            pathNumber = pathNumber + 1

   outputFile.write('check-providers "$all_providers" "$selectedProviders"\n')
   outputFile.write('tbc_success=1\n')
   outputFile.write('for provider in $all_providers ; do\n')
   outputFile.write('   if [[ "$selectedProviders" =~ ^@ALL$|^$provider$$|^$provider$([ ])|([ ])$provider$([ ])|([ ])$provider$$ ]] ; then\n')
   outputFile.write('      echo "Configuring provider $provider from tunnelbox-${provider}-config ..."\n')
   outputFile.write('      if [ -e tunnelbox-${provider}-config ] ; then\n')
   outputFile.write('         . ./tunnelbox-${provider}-config || tbc_success=0\n')
   outputFile.write('      else\n')
   outputFile.write('         echo >&2 "ERROR: tunnelbox-${provider}-config does not exist!"\n')
   outputFile.write('         tbc_success=0\n')
   outputFile.write('      fi\n')
   outputFile.write('   else\n')
   outputFile.write('      echo "Skipping provider $provider ..."\n')
   outputFile.write('   fi\n')
   outputFile.write('done\n')
   outputFile.write('\n')


   # ====== Make local setup ================================================
   outputFile.write('\nif [ "$state" = "start" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log "Setting up local networks ..."\n')

   outputFile.write('   log-action "Deactivating reverse path filtering ..."\n')
   outputFile.write('   INTERFACES=`ip link show | awk \'/^([0-9]*:) ([a-zA-Z0-9\-]+):/ { print $2 }\' | sed -e "s/:$//"`\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.default.rp_filter=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.all.rp_filter=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.default.accept_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.all.accept_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv6.conf.default.accept_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv6.conf.all.accept_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.default.send_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.all.secure_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.default.secure_redirects=0 || true\n')
   outputFile.write('   sysctl -q -w net.ipv4.conf.all.send_redirects=0 || true\n')
   outputFile.write('   for interface in $INTERFACES ; do\n')
   outputFile.write('      sysctl -q -w net.ipv4.conf.$interface.rp_filter=0 || true\n')
   outputFile.write('      sysctl -q -w net.ipv4.conf.$interface.accept_redirects=0 || true\n')
   outputFile.write('      sysctl -q -w net.ipv4.conf.$interface.send_redirects=0 || true\n')
   outputFile.write('      sysctl -q -w net.ipv4.conf.$interface.secure_redirects=0 || true\n')
   outputFile.write('      sysctl -q -w net.ipv6.conf.$interface.accept_redirects=0 || true\n')
   outputFile.write('   done\n')
   outputFile.write('   log-result $RESULT_GOOD\n')

   outputFile.write('   log-action "Turning on ECN ..."\n')
   outputFile.write('   sysctl -q -w net.ipv4.tcp_ecn=1 && \\\n')
   outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')

   outputFile.write('   log-action "Turning on Forwarding ..."\n')
   outputFile.write('   sysctl -q -w net.ipv4.ip_forward=1 && \\\n')
   outputFile.write('   sysctl -q -w net.ipv6.conf.all.forwarding=1 && \\\n')
   outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')

   for localProviderIndex in localProviderList:
      makeTunnelboxNetwork(outputFile, 'start', localInterface,
                            localProviderList[localProviderIndex], localSiteIndex)
   if localSiteIndex == NorNet_SiteIndex_Central:
      fullTunnelNetIPv4 = makeNorNetTunnelIP(0, 0, 0, 0, 4)
      outputFile.write('\n   log-action "Turning on IPv4 NAT ..."\n')
      outputFile.write('   make-nat ' + str(fullNorNetIPv4) + ' "' + sourceNatRange + '" ' + \
                       str(fullNorNetIPv4) + ' ' + str(fullTunnelNetIPv4) + '   && \\\n')
      outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   outputFile.write('fi\n')


   outputFile.write('\nif [ "$state" = "stop" -o "$state" = "start" -o "$state" = "restart" ] ; then\n')
   outputFile.write('   log-action "Flushing route cache ..."\n')
   outputFile.write('   ip route flush cache && \\\n')
   outputFile.write('   log-result $RESULT_GOOD || log-result $RESULT_BAD\n')
   outputFile.write('fi\n\n')

   outputFile.write('if [ $tbc_success -eq 0 ] ; then\n')
   outputFile.write('  return 1\n')
   outputFile.write('fi\n')

   outputFile.close()
   return configurationName



# ###### Main program #######################################################
# ====== Handle arguments ===================================================
bootstrapOnly = False
if len(sys.argv) < 2:
   error('Usage: ' + sys.argv[0] + ' FQDN [-bootstrap]')
fqdn = sys.argv[1]
if len(sys.argv) > 2:
   if sys.argv[2] == '-bootstrap':
      bootstrapOnly = True
   else:
      error('Usage: ' + sys.argv[0] + ' FQDN [-bootstrap]')


# ====== Get configuration ==================================================
if bootstrapOnly:
   loadNorNetConfiguration()
else:
   loginToPLC()

localSiteIndex             = getLocalSiteIndex()
localDefaultProviderIndex  = getLocalDefaultProviderIndex()
localTBDefaultProviderIPv4 = getLocalTunnelboxDefaultProviderIPv4()
localNodeNorNetInterface   = getLocalNodeNorNetInterface()

# ====== Some checks ========================================================
if localSiteIndex == None:
   error('NorNet_LocalSite_SiteIndex has not been set in configuration file!')
if ((localSiteIndex < 1) or (localSiteIndex > 255)):
    error('Bad NorNet_LocalSite_SiteIndex ' + str(localSiteIndex))
if localDefaultProviderIndex == None:
   error('NorNet_LocalSite_DefaultProviderIndex has not been set in configuration file!')
if ((localDefaultProviderIndex < 1) or (localDefaultProviderIndex > 255)):
    error('Bad NorNet_LocalSite_DefaultProviderIndex ' + str(localDefaultProviderIndex))
if localTBDefaultProviderIPv4 == None:
   error('NorNet_LocalSite_TBDefaultProviderIPv4 has not been set in configuration file!')
if localNodeNorNetInterface == None:
   error('NorNet_LocalNode_NorNetInterface has not been set in configuration file!')


# ====== Bootstrap Mode =====================================================
makeTunnelboxBootstrap(localSiteIndex, localDefaultProviderIndex,
                       localNodeNorNetInterface, localTBDefaultProviderIPv4,
                       'tunnelbox')

# ====== Full Mode ==========================================================
if not bootstrapOnly:
   fullSiteList = fetchNorNetSiteList(False)
   localSite    = None
   try:
      localSite = fullSiteList[localSiteIndex]
   except:
      error('Cannot find local site ' + str(localSiteIndex) + ' at PLC database!')
   siteNodeList = fetchNorNetNodeListForSite(localSite)

   makeTunnelboxConfiguration(fullSiteList, localSite, 'tunnelbox')

   # ====== Prepare additional nodes for DNS configuration ==================
   additionalNodes = []
   for i in range(2, 255):
      nodeConfiguration = getLocalNodeConfigurationString(i)
      if nodeConfiguration != u'':
         # print i,nodeConfiguration
         parameters = re.split(r'''[ ]*(?=(?:[^'"]|'[^']*'|"[^"]*")*$)''', nodeConfiguration)
         if len(parameters) < 3:
            error('Bad configuration "' + nodeConfiguration + '" for NorNet_LocalSite_Node' + str(i))

         nodeName     = unquote(parameters[0])
         hardwareInfo = unquote(parameters[1])
         softwareInfo = unquote(parameters[2])
         try:
            options = tuple(unquote(parameters[3]).split(','))
         except:
            options = []
         additionalNodes.append(makeNodeForDNS(nodeName, localSite, i, hardwareInfo, softwareInfo, options))

   makeBindConfiguration(fullSiteList, siteNodeList, localSite, getHostnameFromFQDN(fqdn), additionalNodes)

   # ====== DHCP daemon configuration =======================================
   dynamicStart         = 0
   dynamicEnd           = 0
   dynamicConfiguration = getLocalSiteDHCPServerDynamicConfigurationString()
   if ((dynamicConfiguration != None) and (dynamicConfiguration != u'')):
      parameters = re.split(r'''[ ]*(?=(?:[^'"]|'[^']*'|"[^"]*")*$)''', dynamicConfiguration)
      if len(parameters) < 2:
         error('Bad configuration "' + dynamicConfiguration + '" for NorNet_LocalSite_DHCPServer_DynamicRange')         
      try:
         dynamicStart = int(unquote(parameters[0]))
         dynamicEnd   = int(unquote(parameters[1]))
      except:
         error('Bad configuration "' + dynamicConfiguration + '" for NorNet_LocalSite_DHCPServer_DynamicRange node range values')                  
      if ((dynamicStart <= 1) or (dynamicStart > 255) or
          (dynamicEnd <= 1) or (dynamicEnd > 255)):
         error('Bad configuration "' + dynamicConfiguration + '" for NorNet_LocalSite_DHCPServer_DynamicRange node range indexes')                  

   staticList = []
   for i in range(2, 255):
      staticConfiguration = getLocalSiteDHCPServerStaticConfigurationString(i)
      if staticConfiguration != u'':
         # print i,staticConfiguration
         parameters = re.split(r'''[ ]*(?=(?:[^'"]|'[^']*'|"[^"]*")*$)''', staticConfiguration)
         if len(parameters) < 1:
            error('Bad configuration "' + staticConfiguration + '" for NorNet_LocalSite_DHCPServer_Static' + str(i))
            
         mac = unquote(parameters[0])
         try:
            fileName = unquote(parameters[1])
         except:
            fileName = '';
         try:
            serverName = unquote(parameters[2])
         except:
            serverName = '';
            
         staticEntry = {
            'node_index'      : i,
            'node_mac'        : mac,
            'node_filename'   : fileName,
            'node_servername' : serverName
         }
         staticList.append(staticEntry)
   
   makeDHCPDConfiguration(localSite, dynamicStart, dynamicEnd, staticList)
