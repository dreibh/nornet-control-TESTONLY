#!/bin/bash
#
# Server Setup
# Copyright (C) 2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# ###### Get existing interface configuration (if available) ################
MAY_BE_CONTROLBOX=0
parse-interface-configuration ()
{
   local inputFile="$1"
   local interface="$2"
   local outputFile="$3"

   local found=0
   local writeMode=0
   while read inputLine ; do
      if [[ $inputLine =~ ^auto([ \t]*)${interface}(:[0-9]*|)([ \t]*)(.*)$ ]] ; then
         echo "$inputLine" >>$outputFile
         found=1
      else
         # ====== New interface? =========================================
         if [[ $inputLine =~ ^iface([ \t]*)|^([ \t]*)$ ]] ; then
            if [[ $inputLine =~ ^iface([ \t]*)${interface}(:[0-9]*|)([ \t]*)(.*)$ ]] ; then
               writeMode=1
               echo "$inputLine" | sed -e "s/^[ \t][ \t]*/\t/g" >>$outputFile
            else
               if [ $writeMode -eq 1 ] ; then
                  echo "" >>$outputFile
                  writeMode=0
               fi
            fi

         # ====== Write interface configuration ==========================
         elif [ $writeMode -eq 1 ] ; then
            if [[ $inputLine =~ ^([ \t]*)metric([ \t]*)([0-9]*)([ \t]*)(.*)$ ]] ; then
               metric=${BASH_REMATCH[3]}
               if [ "$metric" -le 5 ] ; then
                  # Non-NorNet metric (< default provider) => may be control box!
                  result=2
                  MAY_BE_CONTROLBOX=1
               fi
            elif [[ $inputLine =~ ^([ \t]*)gateway([ \t]*)([0-9]*)([ \t]*)(.*)$ ]] ; then
               # Interface has a gateway => may be control box!
               MAY_BE_CONTROLBOX=1
            fi
            echo -e "\t$inputLine" >>$outputFile
         fi
      fi
   done <$inputFile

   return $found
}



# ###### Main program #######################################################

# ====== Get arguments from storage, if they are not provided ===============
LAST_PARAMETERS_FILE="/etc/nornet/Server-Setup.args"
if [ $# -lt 8 -o \
     "$3" != "-site" -o \
     "$5" != "-interface" -o \
     "$7" != "-providers" ] ; then
   echo >&2 "Usage: $0 FQDN node_index -site site_index -interface interface_name -providers default_provider[,provider2,...] [-controlbox]"
   if [ -e "$LAST_PARAMETERS_FILE" ] ; then
      LAST_PARAMETERS_ARGS=`cat $LAST_PARAMETERS_FILE`
      echo -en "\x1b[33mRun $0 $LAST_PARAMETERS_ARGS? [yes/no]?\x1b[0m "
      read -er applyChanges
      if [ "$applyChanges" == "yes" -o "$applyChanges" == "y" ] ; then
         bash -c "$0 $LAST_PARAMETERS_ARGS"
         exit $?
      fi
   fi
   exit 1
fi

# ====== Find distribution variant ==========================================
Variant=""
if [ -e /etc/network/interfaces ] ; then
   Variant="Debian"
elif [ -e /etc/sysconfig/network ] ; then
   Variant="Fedora"
else
   echo >&2 "ERROR: Unknown/unsupported operating system? Cannot determine how to configure network!"
   exit 1
fi

# ====== Initialise =========================================================
AllParameters="$@"
FQDN="$1"
NodeIndex="$2"
SiteIndex="$4"
InterfaceName="$6"
ProviderList="$8"
ControlBoxMode="$9"
if [ "$ControlBoxMode" != "" -a "$ControlBoxMode" != "-controlbox" ] ; then
   echo >&2 "ERROR: Bad control box mode! Do you mean -controlbox?"
   exit 1
fi
cd /root   # Ensure that configurations a written in /root!

# ====== Create network configuration =======================================
Make-Server-Configuration "$Variant" "$FQDN" "$NodeIndex" -site "$SiteIndex" -interface "$InterfaceName" -providers "$ProviderList" $ControlBoxMode || exit 1
AllEthernetInterfaces=`ip link show | awk '/^([0-9]*:) ([a-zA-Z0-9\-]+):/ { print $2 }' | grep "^eth" | sed -e "s/:$//" | xargs`
for interface in $AllEthernetInterfaces ; do
   if [ "$interface" != "lo" -a "$interface" != "$InterfaceName" ] ; then
      echo -e "\n# ====== Additional Interface $interface ======" >>interfaces.new
      if parse-interface-configuration /etc/network/interfaces $interface interfaces.new ; then
         (
            echo "auto $interface"
            echo "iface $interface inet static"
            echo "   address 0.0.0.0"
            echo "   netmask 0.0.0.0"
         ) >>interfaces.new
      fi
   fi
done

if [ $MAY_BE_CONTROLBOX -ne 0 ] ; then
   if [ "$ControlBoxMode" != "-controlbox" ] ; then
      echo -e  "\n\x1b[31mWARNING: Node has non-NorNet interface with gateway or small metric!\x1b[0m"
      echo -en "\x1b[31mWARNING: Are you really sure that this node is NOT a Control Box? [confirm/no]\x1b[0m? "
      read -er applyChanges
      if [ "$applyChanges" != "confirm" -a "$applyChanges" != "c" ] ; then
         exit 1
      fi
   fi
fi


# ====== Create other configurations ========================================
( cat /etc/modules | grep -v "^dummy" ; echo "dummy numdummies=1" ) >modules.new
( cat /etc/default/rcS | sed -e "s/^FSCKFIX=no/FSCKFIX=yes/g" ) >rcS.new


# ====== Compare new configurations to old ones =============================
echo "------ BEGIN OF DIFFS ------"
echo "------ /etc/hostname:"
colordiff /etc/hostname hostname.new
echo "------ /etc/hosts:"
colordiff /etc/hosts hosts.new
echo "------ /etc/ntp.conf:"
colordiff /etc/ntp.conf ntp.new
echo "------ /etc/modules:"
colordiff /etc/modules modules.new
echo "------ /etc/default/rcS:"
colordiff /etc/default/rcS rcS.new
if [ -e interfaces.new -a  -e /etc/network/interfaces ] ; then
   echo "------ /etc/network/interfaces:"
   colordiff /etc/network/interfaces interfaces.new
fi
if [ -e ifcfg.new -a  -e /etc/sysconfig/network-scripts/ifcfg-$InterfaceName ] ; then
   echo "------ /etc/sysconfig/network-scripts/ifcfg-$InterfaceName:"
   colordiff /etc/sysconfig/network-scripts/ifcfg-$InterfaceName ifcfg.new
fi
if [ -e route.new -a  -e /etc/sysconfig/network-scripts/route-$InterfaceName ] ; then
   echo "------ /etc/sysconfig/network-scripts/route-$InterfaceName:"
   colordiff /etc/sysconfig/network-scripts/route-$InterfaceName route.new
fi
if [ -e route6.new -a  -e /etc/sysconfig/network-scripts/route6-$InterfaceName ] ; then
   echo "------ /etc/sysconfig/network-scripts/route6-$InterfaceName:"
   colordiff /etc/sysconfig/network-scripts/route6-$InterfaceName route6.new
fi
echo "------ /etc/auto.master:"
colordiff /etc/auto.master auto.master
echo "------ /etc/auto.nfs:"
if [ -e /etc/auto.nfs ] ; then
   colordiff /etc/auto.nfs auto.nfs
else
   cat auto.nfs
fi
echo "------ END OF DIFFS ------"


# ====== Ask for confirmation and apply changes =============================
echo -en "\x1b[33mApply changes (current configuration files will be backuped to <file>~)?\x1b[0m [yes/no]? "
read -er applyChanges
if [ "$applyChanges" != "yes" -a "$applyChanges" != "y" ] ; then
   echo "Skipped!"
else
   cp /etc/hostname /etc/hostname~
   cp  hostname.new /etc/hostname

   cp /etc/hosts /etc/hosts~
   cp  hosts.new /etc/hosts
   hostname `cat /etc/hostname`

   cp modules.new /etc/modules
   cp rcS.new /etc/default/rcS

   cp /etc/ntp.conf /etc/ntp.conf~
   cp ntp.new /etc/ntp.conf

   if [ "$Variant" = "Debian" ] ; then
      cp /etc/network/interfaces /etc/network/interfaces~
      cp interfaces.new /etc/network/interfaces
   elif [ "$Variant" = "Fedora" ] ; then
      if [ -e /etc/sysconfig/network-scripts/ifcfg-$InterfaceName ] ; then
         cp /etc/sysconfig/network-scripts/ifcfg-$InterfaceName /etc/sysconfig/network-scripts/ifcfg-$InterfaceName~
      fi
      if [ -e /etc/sysconfig/network-scripts/route-$InterfaceName ] ; then
         cp /etc/sysconfig/network-scripts/route-$InterfaceName /etc/sysconfig/network-scripts/route-$InterfaceName~
      fi
      if [ -e /etc/sysconfig/network-scripts/route6-$InterfaceName ] ; then
         cp /etc/sysconfig/network-scripts/route6-$InterfaceName /etc/sysconfig/network-scripts/route6-$InterfaceName~
      fi
      rm -f /etc/sysconfig/network-scripts/ifcfg-$InterfaceName* >/dev/null 2>&1 || true
      cp ifcfg.new /etc/sysconfig/network-scripts/ifcfg-$InterfaceName
      cp route.new /etc/sysconfig/network-scripts/route-$InterfaceName
      cp route6.new /etc/sysconfig/network-scripts/route6-$InterfaceName
   fi
   if [ -e /etc/udev/rules.d/70-persistent-net.rules ] ; then
      rm /etc/udev/rules.d/70-persistent-net.rules
   fi

   cp /etc/auto.master /etc/auto.master~
   cp /etc/auto.nfs /etc/auto.nfs~
   cp auto.master /etc/auto.master
   cp auto.nfs /etc/auto.nfs

   service networking restart >/dev/null 2>&1
   service ntp restart >/dev/null 2>&1
   service autofs restart >/dev/null 2>&1
fi
rm -f hostname.new hosts.new ntp.new modules.new rcS.new interfaces.new ifcfg.new route.new route6.new auto.master auto.nfs

# Store parameters for later re-run.
echo "$AllParameters" >$LAST_PARAMETERS_FILE


# ====== Keyboard configuration =============================================
echo -en "\x1b[33mConfigure keyboard? [yes/no]\x1b[0m? "
read -er applyChanges
if [ "$applyChanges" != "yes" -a "$applyChanges" != "y" ] ; then
   echo "Skipped!"
else
   dpkg-reconfigure keyboard-configuration
fi


# ====== System maintenance =================================================
echo -en "\x1b[33mRun system maintenance script? [yes/no]\x1b[0m? "
read -er applyChanges
if [ "$applyChanges" != "yes" -a "$applyChanges" != "y" ] ; then
   echo "Skipped!"
else
   System-Maintenance
fi
