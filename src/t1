#!/usr/bin/python
# -*- coding: utf-8 -*-

# Needs package python-ipaddr (Fedora Core, Ubuntu, Debian)!
from ipaddr import IPAddress, IPNetwork, IPv4Address, IPv4Network, IPv6Address, IPv6Network;

from NorNetProviderSetup import *;
from NorNetTools         import *;

import os;
import re;
#from socket import *;


#print 'NodeVNet=', makeNorNetIP(1,1,2,123, 6)
#print 'NodeNet= ', makeNorNetIP(1,1,2,0, 6)
#print 'NodeNet0=', makeNorNetIP(1,1,2,-1, 6)
#print 'Site=    ', makeNorNetIP(1,1,0,0, 6)
#print 'Provider=', makeNorNetIP(1,0,0,0, 6)
#print 'NorNet=  ', makeNorNetIP(0,0,0,0, 6)
#print ''

#print 'Node=    ', makeNorNetIP(1,1,1,0, 4)
#print 'Site=    ', makeNorNetIP(1,1,0,0, 4)
#print 'Provider=', makeNorNetIP(1,0,0,0, 4)
#print 'NorNet=  ', makeNorNetIP(0,0,0,0, 4)



#addressList = getLocalAddresses(4)
#print "v4 = ", addressList

#addressList = getLocalAddresses(6)
#print "v6 = ", addressList

#for a in addressList:
   #print str(a),NorNet_IPv4Prefix.Contains(a),NorNet_IPv6Prefix.Contains(a)


## ###### Resolve hostname and return first address ##########################
#def resolveHostname(name, protocol=0):
   #try:
      #result = getaddrinfo(name, 123, protocol)
      #print result
      #return(IPAddress(result[0][4][0]))
   #except:
      #return None

#print resolveHostname('ntp1.uio.no', AF_INET6)


# ###### Get hostname from FQDN #############################################
def getHostnameFromFQDN(fqdn):
   match = re.search('^([a-zA-Z0-9\-]*)\.(.*)', domain)
   if match != None:
      return match.group(1)
   else:
      return fqdn

# ###### Get hostname from FQDN #############################################
def getDomainFromFQDN(fqdn):
   match = re.search('^([a-zA-Z0-9\-]*)\.(.*)', domain)
   if match != None:
      return match.group(2)
   else:
      return ''


domain = 'xy-ms-123-XY.alpha.site'
print getHostnameFromFQDN(domain), '\t', getDomainFromFQDN(domain), '\n'


# ###### Get reverse lookup zone for IP address #############################
def getZoneForAddress(addressObject, prefix):
   address = int(addressObject)
   result  = ''

   # ====== IPv4 ============================================================
   if addressObject.version == 4:
      if (prefix % 8) != 0:
         error('Bad prefix /' + str(prefix) + ' for IPv4 address reverse lookup!')

      address = address >> (32 - prefix)
      i = 0
      while i < prefix:
         n = (address & 0xff)
         result = result + str(n) + '.'
         address = address >> 8
         i = i + 8
      result = result + 'in-addr.arpa.'

   # ====== IPv6 ============================================================
   else:
      if (prefix % 4) != 0:
         error('Bad prefix /' + str(prefix) + ' for IPv4 address reverse lookup!')

      address = address >> (128 - prefix)
      i = 0
      while i < prefix:
         n = (address & 0xf)
         result = result + str.replace(hex(int(n)), '0x', '') + '.'
         address = address >> 4
         i = i + 4
      result = result + 'in6.arpa.'

   print result
   return result


getZoneForAddress(IPv4Address('132.252.152.206'), 24)
getZoneForAddress(IPv4Address('132.252.152.206'), 16)
getZoneForAddress(IPv4Address('132.252.152.206'), 8)

getZoneForAddress(IPv6Address('fd01:affe::1'), 64)
getZoneForAddress(IPv6Address('fd01:affe::1'), 128)
