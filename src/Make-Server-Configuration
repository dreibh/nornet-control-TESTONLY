#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# NorNet Setup
# Copyright (C) 2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import re;
import os;
import base64;

# Needs package python-ipaddr (Fedora Core, Ubuntu, Debian)!
from ipaddr import IPv4Address, IPv4Network, IPv6Address, IPv6Network;

# NorNet
from NorNetTools         import *;
from NorNetConfiguration import *;
from NorNetAPI           import *;
from NorNetProviderSetup import *;
from NorNetNodeSetup     import *;



# ###### Write hostname file ################################################
def writeHostname(outputName, hostName, domainName):
   outputFile = codecs.open(outputName, 'w', 'utf-8')
   outputFile.write(hostName + '.' + domainName + '\n')
   outputFile.close()


# ###### Write hosts file ###################################################
def writeHosts(outputName, hostName, domainName):
   outputFile = codecs.open(outputName, 'w', 'utf-8')
   outputFile.write('127.0.0.1\tlocalhost\n')
   outputFile.write('127.0.1.1\t' + hostName + '.' + domainName + ' ' + hostName + '\n\n')
   outputFile.write('# The following lines are desirable for IPv6 capable hosts\n')
   outputFile.write('::1\tip6-localhost ip6-loopback\n')
   outputFile.write('fe00::0\tip6-localnet\n')
   outputFile.write('ff00::0\tip6-mcastprefix\n')
   outputFile.write('ff02::1\tip6-allnodes\n')
   outputFile.write('ff02::2\tip6-allrouters\n')
   outputFile.close()




# ###### Write NTP configuration file ##############################################
def writeNTPConfiguration(outputName, nodeIndex, siteIndex, defaultProvider):
   outputFile = codecs.open(outputName, 'w', 'utf-8')

   outputFile.write('# ====== Drift File ======\n')
   outputFile.write('driftfile /var/lib/ntp/ntp.drift\n\n')

   outputFile.write('# ====== Statistics ======\n')
   outputFile.write('statsdir /var/log/ntpstats/\n')
   outputFile.write('filegen loopstats file loopstats type day enable\n')
   outputFile.write('filegen peerstats file peerstats type day enable\n')
   outputFile.write('filegen clockstats file clockstats type day enable\n\n')

   outputFile.write('# ====== Generic Access Restrictions ======\n')
   outputFile.write('restrict default ignore\n')
   outputFile.write('restrict 127.0.0.1\n')
   outputFile.write('restrict ::1\n\n')

   outputFile.write('# ====== NTP server ======\n')
   for version in [ 6 ]:
      ntpServer = makeNorNetIP(defaultProvider, siteIndex, NorNet_NodeIndex_Tunnelbox, version)
      outputFile.write('server    ' + str(ntpServer.ip) + '\n')
      outputFile.write('restrict  ' + str(ntpServer.ip) + '\n')

   outputFile.close()


# ###### Write interfaces file ##############################################
def writeInterfaces(outputName, hostName, domainName, nodeIndex, siteIndex,
                    providerList, defaultProvider, interfaceName,
                    controlBoxMode = True):
   outputFile = codecs.open(outputName, 'w', 'utf-8')

   outputFile.write('# ====== Loopback ======\n')
   outputFile.write('auto lo\n')
   outputFile.write('iface lo inet loopback\n\n')

   outputFile.write('# ====== NorNet-Internal Networks ======\n')
   outputFile.write('auto ' + interfaceName + '\n')

   logSuffix = " >>/var/log/nornet-ifupdown.log 2>&1"

   for version in [ 4, 6 ]:
      for onlyDefault in [ True, False ]:
         providerNumber = 0
         for providerIndex in providerList:
            if ( ((onlyDefault == True)  and (providerIndex == defaultProvider)) or \
                 ((onlyDefault == False) and (providerIndex != defaultProvider)) ):
               try:
                  providerName = NorNet_ProviderList[providerIndex][0]
               except:
                  providerName = '???'

               # ====== Addressing =======================================
               address = makeNorNetIP(providerIndex, siteIndex, nodeIndex,                  version)
               gateway = makeNorNetIP(providerIndex, siteIndex, NorNet_NodeIndex_Tunnelbox, version)
               metric = NorNet_RoutingMetric_AdditionalProvider + providerNumber
               if providerIndex == defaultProvider:
                  metric = NorNet_RoutingMetric_DefaultProvider
               addrOpts = ''
               if version == 4:
                  addrOpts = ' broadcast ' + str(address.broadcast)

               # ====== Write configuration =================================
               if providerIndex == defaultProvider:
                  if version == 4:
                     outputFile.write('iface ' + interfaceName + ' inet manual\n')
                  else:
                     outputFile.write('\niface ' + interfaceName + ' inet6 manual\n')

                     # Turn off IPv6 auto-configuration and privacy extensions (since we are a server!)
                     outputFile.write('   pre-up /sbin/sysctl -q -e -w ' + \
                                      'net.ipv6.conf.' + interfaceName + '.use_tempaddr=0 ' + \
                                      'net.ipv6.conf.' + interfaceName + '.accept_ra=0 '    + \
                                      'net.ipv6.conf.' + interfaceName + '.autoconf=0 '     + \
                                      ' || true\n')

                  outputFile.write('   pre-up    ( /bin/echo "`/bin/date` pre-up: ' + interfaceName + '"    ; /sbin/ip link set up   dev ' + interfaceName + ')' + logSuffix + '\n')
                  outputFile.write('   post-down ( /bin/echo "`/bin/date` post-down: ' + interfaceName + '" ; /sbin/ip link set down dev ' + interfaceName + ' >/dev/null 2>&1 )' + logSuffix + '\n')


               outputFile.write('   # ====== ' + providerName + ' (' + str(providerIndex) + ') ======\n')
               outputFile.write('   up   ( /bin/echo "`/bin/date` add: ' + str(address) + '" ; /sbin/ip -' + str(version) + ' addr add ' + str(address) + addrOpts + ' dev ' + interfaceName + ' &&')
               outputFile.write(' /sbin/ip -' + str(version) + ' route add default via ' + str(gateway.ip) + ' dev ' + interfaceName + ' metric ' + str(metric) + ' || true )' + logSuffix + '\n')
               outputFile.write('   down ( /bin/echo "`/bin/date` del: ' + str(address) + '" ; /sbin/ip -' + str(version) + ' addr del ' + str(address) + addrOpts + ' dev ' + interfaceName + ' >/dev/null 2>&1 &&')
               outputFile.write(' /sbin/ip -' + str(version) + ' route del default via ' + str(gateway.ip) + ' dev ' + interfaceName + ' metric ' + str(metric) + ' >/dev/null 2>&1 || true )' + logSuffix + '\n')

               if providerIndex == defaultProvider:
                  # Add DNS configuration.
                  outputFile.write('   dns-nameservers ' + str(gateway.ip) + '\n')
                  outputFile.write('   dns-search      ' + domainName + '\n')

            providerNumber = providerNumber + 1

   outputFile.close()



# ###### Main program #######################################################
if ((len(sys.argv) < 9) or (sys.argv[3] != '-site') or (sys.argv[5] != '-interface') or (sys.argv[7] != '-providers')):
   error('Usage: ' + sys.argv[0] + ' FQDN node_index -site site_index -interface interface_name -providers default_provider[,provider2,...] [-controlbox]')

hostName   = getHostnameFromFQDN(sys.argv[1])
domainName = getDomainFromFQDN(sys.argv[1])
nodeIndex  = int(sys.argv[2])
if ((nodeIndex < 1) or (nodeIndex > 255)):
   error('Bad node index!')
siteIndex = int(sys.argv[4])
if ((siteIndex < 1) or (siteIndex > 255)):
   error('Bad site index!')
interfaceName = sys.argv[6]
controlBoxMode = False
if len(sys.argv) > 9:
    if sys.argv[9] == '-controlbox':
       controlBoxMode = True
    else:
       error('Bad control box mode! Do you mean -controlbox?')

loadNorNetConfiguration(False)

defaultProvider = -1
providerList    = []
for providerName in sys.argv[8].split(','):
   providerIndex = -1
   try:
      providerIndex = int(providerName)
   except:
      for p in NorNet_ProviderList:
         if ((NorNet_ProviderList[p][0] == providerName) or
             (NorNet_ProviderList[p][1] == providerName)):
            providerIndex = p
            break
   if ((providerIndex <= 0) or (providerIndex > 255)):
      error("Bad provider " + providerName)
   if len(providerList) == 0:
      defaultProvider = providerIndex
   providerList.append(providerIndex)


print('Node:       ' + hostName + ' . ' + domainName)
print('Node Index: ' + str(nodeIndex))
print('Site Index: ' + str(siteIndex))
print('Interface:  ' + interfaceName)
print('Providers:  ' + str(providerList))


writeHostname('hostname.new', hostName, domainName)
writeHosts('hosts.new', hostName, domainName)
writeInterfaces('interfaces.new', hostName, domainName, nodeIndex, siteIndex,
                providerList, defaultProvider, interfaceName, controlBoxMode)
writeNTPConfiguration('ntp.new', nodeIndex, siteIndex, defaultProvider)

# Create AutoFS configuration only if we are not on the file server itself!
# (otherwise: just add empty AutoFS configuration)
weAreOnFileServer = ((siteIndex == NorNet_SiteIndex_FileSrv) and
                     (nodeIndex == NorNet_NodeIndex_FileSrv))
makeAutoFSConfiguration(weAreOnFileServer, siteIndex, nodeIndex, True)
