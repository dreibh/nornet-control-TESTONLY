#!/bin/sh -e
#
# Show all virtual systems
# Copyright (C) 2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# ###### Call VBoxManage with timeouts #######################################
vmcontrol ()
{
   intTimeout=15
   killTimeout=30
   ############# VirtualBox
   if [ "$1" = "vbox" ] ; then
      sudo -u $NorNet_LocalNode_NorNetUser timeout -s INT -k $killTimeout $intTimeout VBoxManage controlvm $2 $3 || true

   ############# kvm
   elif [ "$1" = "kvm" ] ; then
      sudo -u $NorNet_LocalNode_NorNetUser timeout -s INT -k $killTimeout $intTimeout virsh $2 $3 || true
   fi

}



# ###### Main program #######################################################
if [ $# -lt 1 ] ; then
   echo >&2 "Usage: $0 VM_name"
   exit 1
fi

NORNET_DIRECTORY="/etc/nornet"
MACHINE_NAME="$1"

# ====== Get NorNet user name ===============================================
if [ -e $NORNET_DIRECTORY/nornetapi-config ] ; then
   . $NORNET_DIRECTORY/nornetapi-config
elif [ -e ./nornetapi-config ] ; then
   . ./nornetapi-config
fi
if [ "$NorNet_LocalNode_NorNetUser" = "" ] ; then
   NorNet_LocalNode_NorNetUser="nornetpp"
fi

if [ "$NorNet_LocalNode_Vplatform" = "kvm" ] ; then
   Vplatform="kvm"
elif [ "$NorNet_LocalNode_Vplatform" = "vbox" ] ; then
   Vplatform="vbox"
fi



# ====== Obtain machine status ==============================================
status=`./Check-VSystem-kvm "$MACHINE_NAME"`

if [ "$status" = "shut off" -o "$status" = "poweroff" ] ; then
   echo "`env LANG=C date +%FT%H:%M:%S`: Machine $MACHINE_NAME is off. Needs to Start it!."
fi   

if [ "$status" = "paused" ] ; then
   echo "`env LANG=C date +%FT%H:%M:%S`: Resuming $MACHINE_NAME to perform restart ..."
   ################### VirtualBox #####
   if [ "$Vplatform" = "vbox" ] ; then
      vmcontrol "$Vplatform" "$MACHINE_NAME" resume
   ################### KVM ############
   elif [ "$Vplatform" = "kvm" ] ; then
      vmcontrol "$Vplatform" resume "$MACHINE_NAME"
   fi

   status=`./Check-VSystem-kvm "$MACHINE_NAME"`
fi

if [ "$status" = "running" ] ; then
   echo "`env LANG=C date +%FT%H:%M:%S`: Restarting $MACHINE_NAME  ..." && \

   ################### VirtualBox #####
   if [ "$Vplatform" = "vbox" ] ; then
      vmcontrol "$Vplatform" "$MACHINE_NAME" reset
   ################### KVM ############
   elif [ "$Vplatform" = "kvm" ] ; then
      vmcontrol "$Vplatform" reboot "$MACHINE_NAME"
   fi

#   status=`./Check-VSystem-kvm "$MACHINE_NAME"`
fi




