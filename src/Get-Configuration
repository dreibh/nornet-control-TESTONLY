#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Get all sites
# Copyright (C) 2012-2014 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import os, sys
import base64

# NorNet
from NorNetSiteSetup import *;
from NorNetTools     import *;
from NorNetAPI       import *;


class TableOutput:
   def __init__(self):
      sys.stdout.write('<?xml version="1.0" encoding="utf-8" ?>\n')
      sys.stdout.write('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">\n')
      sys.stdout.write('<html>\n')
      sys.stdout.write('<head>\n')
      sys.stdout.write('<title>Testbed Overview</title>\n')
      sys.stdout.write('<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />\n')
      sys.stdout.write('<link rel="stylesheet" href="http://www.iem.uni-due.de/~dreibh/stylesheet.css" type="text/css" />\n')
      sys.stdout.write('<style type="text/css">\n')
      sys.stdout.write('td {\n')
      sys.stdout.write('text-align: center;\n')
      sys.stdout.write('  vertical-align: middle;\n')
      sys.stdout.write('}\n')
      sys.stdout.write('</style>\n')
      sys.stdout.write('</head>\n')
      sys.stdout.write('<body>\n')
      self.indent = 0

   def __del__(self):
      sys.stdout.write('</body>\n</html>\n')

   def beginTable(self, columns=2):
      self.doIndentation(True)
      sys.stdout.write('<table border="1">\n')
      self.indent = self.indent + 1

   def endTable(self):
      self.indent = self.indent - 1
      sys.stdout.write('</table>\n')

   def beginRow(self):
      self.doIndentation(False)
      sys.stdout.write('<tr>')

   def endRow(self):
      sys.stdout.write('</tr>\n')

   def makeURL(self, url):
      return '<a href="' + url + '">' + url + '</a>'

   def beginCell(self, colspan = -1, rowspan = -1, width = -1):
      opts=''
      if colspan >= 0:
         opts = opts + ' colspan="' + str(colspan) + '"'
      if rowspan >= 0:
         opts = opts + ' rowspan="' + str(rowspan) + '"'
      if width >= 0:
         opts = opts + ' style="width: ' + str(width) + 'em;"'
      sys.stdout.write('<td' + opts + '>')

   def endCell(self):
      sys.stdout.write('</td>')

   def cell(self, cell = '', colspan = -1, rowspan = -1, width = -1):
      self.beginCell(colspan, rowspan, width)
      sys.stdout.write(cell)
      self.endCell()

   def doIndentation(self, newline = False):
      if newline == True:
         sys.stdout.write('\n')
      i = self.indent
      while i > 0:
         sys.stdout.write(' ')
         i = i - 1


# ###### Get NorNet node object for sliver ##################################
def makePseudoNode(nodeName, site, nodeIndex, model):
   dnsName = makeNameFromUnicode(nodeName)
   norNetNode = {
      'node_site_id'          : site['site_id'],
      'node_index'            : int(nodeIndex),
      'node_name'             : dnsName['ascii'] + '.' + site['site_domain'],
      'node_utf8'             : dnsName['utf8']  + '.' + site['site_domain'],
      'node_nornet_interface' : None,
      'node_model'            : model,
      'node_state'            : 'SLIVER',
      'node_tags'             : []
   }
   return norNetNode


# ###### Reserve address ####################################################
addressList = []
def reserve(address):
   if address in addressList:
      error('Address ' + str(address) + ' is already reserved!')
   addressList.append(address)


# ###### Main program #######################################################
loginToPLC(quietMode = True)

siteList  = fetchNorNetSite(None)
nodeList  = fetchNorNetNode(None)
sliceList = fetchNorNetSlice(None)

siteImageURL = 'http://monitor.simula.nornet/Kontrollsenter/Graphics/Sites'

# ====== Handle slices ======================================================
if sliceList == None:
   print 'ERROR: Slice list is empty?! Missing NorNet patch?'
   sys.exit(1)

sliverNodeList = []
for slice in sliceList:
   for node in nodeList:
      if node['node_id'] in slice['slice_node_ids']:
         sliceDNSName   = str.replace(slice['slice_name'], '_', '-')
         sliceHostname  = sliceDNSName + '.' + getHostnameFromFQDN(node['node_utf8'])
         sliceNodeIndex = getSliceNodeIndexOfNorNetSlice(slice, node)
         sliceNode = makePseudoNode(sliceHostname,
                                    getNorNetSiteOfNode(siteList, node),
                                    node['node_index'],
                                    node['node_model'])
         # Add a pseudo entry to create a slice address later
         sliceNode['pseudo_slice_node_index'] = getSliceNodeIndexOfNorNetSlice(slice, node)
         sliverNodeList.append(sliceNode)


nodeList       = sorted(nodeList, key = lambda x: x['node_index'])
sliverNodeList = sorted(sliverNodeList, key = lambda x: x['node_index'])

output = TableOutput()
output.beginTable()

output.beginRow()
output.cell('Site')
output.cell('Site Details')
output.endRow()

for siteIndex in siteList:
   output.beginRow()

   site = siteList[siteIndex]
   #print site
   siteIndex       = site['site_index']
   siteName        = site['site_utf8']
   providerList    = getNorNetProvidersForSite(site)
   siteTagsList    = site['site_tags']
   siteCountryCode = ''
   siteCountry     = ''
   siteProvince    = ''
   siteCity        = ''

   for siteTag in siteTagsList:
      if siteTag['tagname'] == 'nornet_site_country_code':
         siteCountryCode = siteTag['value']
      elif siteTag['tagname'] == 'nornet_site_country':
         siteCountry = siteTag['value']
      elif siteTag['tagname'] == 'nornet_site_province':
         siteProvince = siteTag['value']
      elif siteTag['tagname'] == 'nornet_site_city':
         siteCity = siteTag['value']

   siteLocation = siteCity
   if siteProvince != '':
      siteLocation = siteLocation + ', ' + siteProvince 
   siteLocation = siteLocation + '/' + siteCountry 
   
   sitePosition = str(site['site_longitude']) + ', ' + str(site['site_latitude'])


   output.cell(str(siteIndex))
   
   output.beginCell()
   
   output.beginTable()
   
   output.beginRow()
   output.cell(siteName, 4 + 2 * len(providerList), -1, 100)
   output.endRow()

   output.beginRow()
   output.cell('Node', 2, 2, 4)
   output.cell('Sliver', 2, 2, 8)
   isp = 0
   for onlyDefault in [ True, False ]:
      for providerIndex in providerList:
         if ( ((onlyDefault == True)  and (providerIndex == site['site_default_provider_index'])) or \
               ((onlyDefault == False) and (providerIndex != site['site_default_provider_index'])) ):
            provider = providerList[providerIndex]
            output.cell(provider['provider_long_name'] + ' (' + str(provider['provider_index']) + ')', 2)
            isp = isp + 1
   output.endRow()

   output.beginRow()
   i = 0
   while i < isp:
      output.cell('IPv4', -1, -1, 8)
      output.cell('IPv6', -1, -1, 16)
      i = i + 1
   output.endRow()


   # ====== Get site information ======================================
   siteInfoTable = [
      [ 'Location',     siteLocation ],
      [ u'GPS/ГЛОНАСС', sitePosition ],
      [ 'URL',          output.makeURL(site['site_url']) ]
   ]

   output.beginRow()
   imageURL = siteImageURL + '/' + site['site_long_name'] + '.jpeg'
   output.cell('<img src="' + imageURL + '" style="height: 10em;" alt="" />', 4, 1 + len(siteInfoTable))
   output.cell('Site Information', 2 * len(providerList))
   output.endRow()
   
   for siteInfo in siteInfoTable:
      output.beginRow()
      output.cell(siteInfo[0])
      output.cell(siteInfo[1], 2 * len(providerList) - 1)
      output.endRow()


   for node in nodeList:
      # ====== Obtain site information ======================================
      if node['node_site_id'] == site['site_id']:
         #print node
         nodeIndex = node['node_index']
         nodeName  = node['node_name']
         nodeUTF8  = node['node_utf8']
         nodeState = node['node_state']

         nodeFC = 'NA'
         nodePL = 'NA'
         nodeTagsList = node['node_tags']
         for nodeTag in nodeTagsList:
            if nodeTag['tagname'] == 'fcdistro':
               nodeFC = nodeTag['value']
            if nodeTag['tagname'] == 'pldistro':
               nodePL = nodeTag['value']


         # ====== Get slivers of node =======================================
         #print '   SLIVERS:'
         sliversOfNode = []
         for sliverNode in sliverNodeList:
            if ((sliverNode['node_site_id'] == site['site_id']) and
                (sliverNode['node_index'] == nodeIndex)):
               sliversOfNode.append(sliverNode)


         # ====== Root context ==============================================
         output.beginRow()
         output.cell(str(nodeIndex), -1, 1 + len(sliversOfNode))
         output.cell(nodeName, -1, 1 + len(sliversOfNode))
         output.cell('Root Context', 2)

         for onlyDefault in [ True, False ]:
            for providerIndex in providerList:
               if ( ((onlyDefault == True)  and (providerIndex == site['site_default_provider_index'])) or \
                     ((onlyDefault == False) and (providerIndex != site['site_default_provider_index'])) ):

                  provider = providerList[providerIndex]
                  #print provider

                  ifIPv4 = makeNorNetIP(providerIndex, siteIndex, nodeIndex, 4, 0).ip
                  ifIPv6 = makeNorNetIP(providerIndex, siteIndex, nodeIndex, 6, 0).ip
                  reserve(ifIPv4)
                  reserve(ifIPv6)

                  output.cell(str(ifIPv4))
                  output.cell(str(ifIPv6))

                  #print '\t' + provider['provider_long_name'] + '\t' + str(ifIPv4) + ' ' + str(ifIPv6)

         output.endRow()


         # ====== Sliver context ============================================
         for sliverNode in sliversOfNode:
            output.beginRow()
            #output.cell()
            #output.cell()
            output.cell(str(sliverNode['pseudo_slice_node_index']))
            output.cell(sliverNode['node_utf8'])

            sliceNodeIndex = sliverNode['pseudo_slice_node_index']
            for onlyDefault in [ True, False ]:
               for providerIndex in providerList:
                  if ( ((onlyDefault == True)  and (providerIndex == site['site_default_provider_index'])) or \
                        ((onlyDefault == False) and (providerIndex != site['site_default_provider_index'])) ):
                     provider = providerList[providerIndex]

                     ifIPv4 = makeNorNetIP(providerIndex, siteIndex, nodeIndex, 4, sliceNodeIndex).ip
                     ifIPv6 = makeNorNetIP(providerIndex, siteIndex, nodeIndex, 6, sliceNodeIndex).ip
                     reserve(ifIPv4)
                     reserve(ifIPv6)

                     output.cell(str(ifIPv4))
                     output.cell(str(ifIPv6))

                     #print '\t' + provider['provider_long_name'] + '\t' + str(ifIPv4) + ' ' + str(ifIPv6)

            output.endRow()


   output.endTable()

   output.endCell()
   output.endRow()

output.endTable()
