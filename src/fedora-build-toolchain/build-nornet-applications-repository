#!/bin/bash -e
#
# Build NorNet Applications Repository
# Copyright (C) 2013-2015 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

# !!!!! Needed when running with "sudo"! !!!!!
HOME="/home/nornetpp"

SOURCES="$HOME/src"
REPOSITORIES="/home/nornetpp/repos/nornet-applications"
DISTRIBUTIONS="fedora-18-x86_64 fedora-20-x86_64 fedora-21-x86_64   fedora-18-i386 fedora-20-i386 fedora-21-i386"

PACKAGES="bibtexconv fractgen netperfmeter rsplib subnetcalc tsctp libvirt"
#PACKAGES="fractgen"


# ====== BibTeXConv =======================================
bibtexconv_DIR="$SOURCES/misc-trunk/bibtexconv"

# ====== Fractal Generator ================================
fractgen_DIR="$SOURCES/misc-trunk/fractgen2"

# ====== NetPerfMeter =====================================
netperfmeter_DIR="$SOURCES/misc-trunk/netperfmeter"

# ====== rsplib ===========================================
rsplib_DIR="$SOURCES/sctp-trunk/rsplib2"

# ====== SubNetCalc =======================================
subnetcalc_DIR="$SOURCES/misc-trunk/subnetcalc"

# ====== TSCTP ============================================
tsctp_DIR="$SOURCES/misc-trunk/tsctp"

# ====== libvirt ==========================================
libvirt_DIR="`pwd`/libvirt"

## ====== Tracebox =========================================
#tracebox_DIR="$SOURCES/tracebox"
#
## ====== MPTCP Kernel =====================================
#kernel_DIR="$SOURCES/misc-trunk/mptcp-kernel"


# # ====== cfengine ==========================================
# cfengine_DIR="`pwd`/cfengine"
#
# # ====== transforward =====================================
# transforward_DIR="`pwd`/transforward"
#
# # ====== ipfwroot =========================================
# ipfwroot_DIR="`pwd`/ipfwroot"



# ###### Main program #######################################################

# ====== Handle arguments ===================================================
WORKDIR=`pwd`
UPDATE=0
while [ "$1" != "" ] ; do
   if [ "$1" = "-update" ] ; then
      UPDATE=1
   else
      echo >&2 "Usage: $0 [-update]"
      exit 1
   fi
   shift
done


# ====== Prepare output directories =========================================
echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Preparing repositories in $REPOSITORIES ...\x1b[0m"
DISTRIBUTION_DIRECTORIES=`echo "$DISTRIBUTIONS" | sed -e "s/-/\//g"`
for directory in $DISTRIBUTION_DIRECTORIES ; do
   mkdir -p "$REPOSITORIES/$directory/RPMS"
   mkdir -p "$REPOSITORIES/$directory/SRPMS"
done


# ====== Packaging loop =====================================================
for package in $PACKAGES ; do
   echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Packaging $package ...\x1b[0m"
   package_dir=""
   eval "package_dir=\$${package}_DIR"
   if [ "$package_dir" == "" ] ; then
      echo >&2 "ERROR: Invalid directory given in ${package}_DIR!"
      exit 1
   fi
   cd "$package_dir"

   # ====== Update ==========================================================
   if [ $UPDATE -eq 1 ] ; then
      echo -e "\x1b[1;32m`date +%FT%H:%M:%S`: Updating package $package ...\x1b[0m"
      if svn info >/dev/null 2>&1 ; then
         svn update
      else
         git pull
      fi
   fi

   # ====== Upstream sources ================================================
   eval "package_dir=\$${package}_DIR"
   echo -e "\x1b[1;32m`date +%FT%H:%M:%S`: Creating RPMs for $package ...\x1b[0m"

   ./clean-deb
   ./make-rpm $DISTRIBUTIONS

   for distribution in $DISTRIBUTIONS ; do
      rpms=`find /var/lib/mock/$distribution/result -name "$package*.rpm" || true`
      if [ "$rpms" == "" ] ; then
         echo >&2 "ERROR: Cannot find RPMs for package $package in /var/lib/mock/$distribution/result!"
         exit 1
      fi
      directory=`echo "$distribution" | sed -e "s/-/\//g"`
      for rpm in $rpms ; do
         if [[ "$rpm" =~ \.src\.rpm$ ]] ; then
            echo "S=$rpm"
            cp "$rpm" "$REPOSITORIES/$directory/SRPMS/"
         else
            echo "B=$rpm"
            cp "$rpm" "$REPOSITORIES/$directory/RPMS/"
         fi
      done
   done

done

cd "$WORKDIR"


# ====== Make groups ========================================================
./make-nornet-groups


# ====== Update repository management files =================================
echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Updating repositories ...\x1b[0m"
for directory in $DISTRIBUTION_DIRECTORIES ; do
   cp nornet-groups.xml "$REPOSITORIES/$directory"
   
   oldPackages=`repomanage --keep=2 --old "$REPOSITORIES/$directory"`
   for oldPackage in $oldPackages ; do
      echo "Removing $oldPackage"
      rm -rf "$oldPackage"
   done
   if [ -e "$REPOSITORIES/$directory/repodata/" ] ; then
      rm -rf "$REPOSITORIES/$directory/repodata/"
   fi
   createrepo -g "$REPOSITORIES/$directory/nornet-groups.xml" "$REPOSITORIES/$directory"
done
tree $REPOSITORIES/


echo -e "\x1b[1;34m`date +%FT%H:%M:%S`: Successfully completed package creation!\x1b[0m"
