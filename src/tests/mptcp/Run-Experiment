#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# MPTCP Example Experiment
# Copyright (C) 2012-2014 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

import sys;
import subprocess;
import time;
import datetime;

# NorNet
from NorNetSiteSetup import *;
from NorNetTools     import *;
from NorNetAPI       import *;


MeasurementName = 'One'
SliceName = 'srl_mptcp'
Runtime = 30
PortBase = 11030
ExperimentNodeNames = [
   "skoeyen.simula.nornet",
   "ekeberg.uio.nornet",
   "kapp.hig.nornet",
   "aunegaarden.uit.nornet",
   "floeibanen.uib.nornet",
   "midnattssol.unis.nornet",
   "bybro.ntnu.nornet",
   "beisfjordtoetta.hin.nornet",
   "nakholmen.hioa.nornet",
   "mariebergsskogen.kau.nornet",
   "baldeneysee.ude.nornet",
   "yalongbay.hu.nornet",
   "watson.ku.nornet",
   "betzenberg.tukl.nornet"

   # -- problems -- "fjoesnisse.uia.nornet",
   #"sokn.uis.nornet",
]


# ###### Invoke local command ###############################################
def doLocal(cmdLine):
   print '\x1b[33m' + cmdLine + '\x1b[0m'
   result = subprocess.call(cmdLine, shell=True)
   if result != 0:
      print '\x1b[31;1m========== WARNING: result=' + str(result) + ' ==========\x1b[0m'


# ###### Invoke SSH #########################################################
def doSSH(localNode, slice, cmdLine, async = False):
   sshCall = [ '/usr/bin/ssh' , slice['slice_name'] + '@' + localNode['node_name'] , '-oStrictHostKeyChecking=no', '-oConnectTimeout=30', '-oBatchMode=yes', cmdLine ]
   print '\x1b[34m' + slice['slice_name'] + '@' + localNode['node_name'] + '> ' + '\x1b[33m' + cmdLine + '\x1b[0m'
   if async == False:
      result = subprocess.call(sshCall, shell=False)
      if result != 0:
         print '\x1b[31;1m========== WARNING: result=' + str(result) + ' ==========\x1b[0m'
   else:
      newProcess = subprocess.Popen(sshCall)
      return newProcess


# ###### Run RSync ##########################################################
def doRSync(localNode, slice, directory):
   rsyncCall = [ '/usr/bin/rsync', '-e', 'ssh', '-av', '-q', slice['slice_name'] + '@' + localNode['node_name'] + ':' + directory + '/', directory + '/' ]
   print '\x1b[33m' + str(rsyncCall) + '\x1b[0m'
   result = subprocess.call(rsyncCall)
   if result != 0:
      print '\x1b[31;1m========== WARNING: result=' + str(result) + ' ==========\x1b[0m'


# ###### Make address #######################################################
def makeAddress(site, node, provider, version, slice):
   if provider != None:
      sliceNodeIndex = getSliceNodeIndexOfNorNetSlice(slice, node)
      address   = makeNorNetIP(provider['provider_index'], site['site_index'], node['node_index'],
                                    version, sliceNodeIndex).ip
   else:
      if version == 4:
         address = IPv4Address('0.0.0.0')
      else:
         address = IPv6Address('::')

   return address


# ###### Make port ##########################################################
def makePort(site, node, provider, version, slice):
   if provider != None:
      port = PortBase + 10 * provider['provider_index']
   else:
      port = PortBase

   if version != 4:
      port = port + 500

   return port


# ###### Initialise passive side ############################################
def preparePassiveSide(localNode, slice):
   localSite          = getNorNetSiteOfNode(fullSiteList, localNode)
   localProviderList  = getNorNetProvidersForSite(localSite)

   cmdLine = 'pkill netperfmeter ; rm -rf ' + MeasurementName + ' ; mkdir ' + MeasurementName

   for version in [ 4, 6 ]:
      localAddress = makeAddress(localSite, localNode, None, version, slice)
      localPort    = makePort(localSite, localNode, None, version, slice)
      cmdLine = cmdLine + ' ; ( nohup netperfmeter ' + str(localPort) + ' ' + \
         '-local=[' + str(localAddress) + '] ' + \
         '-verbosity=0 ' + \
         '>>' + MeasurementName + '/NetPerfMeter-' + localNode['node_name'] + '.log 2>&1 & )'

   for localProviderIndex in localProviderList:
      localProvider = localProviderList[localProviderIndex]
      for version in [ 4, 6 ]:
         localAddress = makeAddress(localSite, localNode, localProvider, version, slice)
         localPort    = makePort(localSite, localNode, localProvider, version, slice)

         cmdLine = cmdLine + ' ; ( nohup netperfmeter ' + str(localPort) + ' ' + \
            '-local=[' + str(localAddress) + '] ' + \
            '-verbosity=0 ' + \
            '>>' + MeasurementName + '/NetPerfMeter-' + localNode['node_name'] + '.log 2>&1 & )'

   result = doSSH(localNode, slice, cmdLine, True)
   return result


# ###### Clean up passive side ##############################################
def cleanUpPassiveSide(localNode, slice):
   cmdLine = 'pkill netperfmeter && hostname && cat ' + MeasurementName + '/NetPerfMeter-' + localNode['node_name'] + '.log'
   return doSSH(localNode, slice, cmdLine, True)


# ###### Get variable names #################################################
def getVariableNames():
   return 'TimeStamp ' + \
          'FromNodeIndex FromNode ToNodeIndex ToNode ' + \
          'FromSite FromSiteIndex ToSite ToSiteIndex ' + \
          'FromProvider FromProviderIndex ToProvider ToProviderIndex ' + \
          'CC CMT PathMgr NDiffPorts ' + \
          'IPVersion'

# ###### Get variable settings ##############################################
def getVariableSettings(localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version, cc, cmt, pathMgr, nDiffPorts, now):
   return unicode(str(now))                      + ' '  + \
          unicode(str(localNode['node_index']))  + ' '  + \
          u'"' + localNode['node_name']          + '" '  + \
          unicode(str(remoteNode['node_index'])) + ' '  + \
          u'"' + remoteNode['node_name']         + '" '  + \
          u'"' + localSite['site_utf8']          + '" '  + \
          unicode(str(localSite['site_index']))  + ' '  + \
          u'"' + remoteSite['site_utf8']         + '" '  + \
          unicode(str(remoteSite['site_index'])) + ' '  + \
          u'"' + localProvider['provider_short_name']           + '" ' + \
          u'"' + unicode(str(localProvider['provider_index']))  + '" ' + \
          u'"' + remoteProvider['provider_short_name']          + '" ' + \
          u'"' + unicode(str(remoteProvider['provider_index'])) + '" ' + \
          u'"' + unicode(cc)       + '" ' + \
          u'"' + unicode(cmt)      + '" ' + \
          u'"' + unicode(pathMgr)  + '" ' + \
          unicode(str(nDiffPorts)) + ' '  + \
          unicode(str(version))


# ###### Get scalar file name ###############################################
def getScalarName(localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version, cc, cmt, pathMgr, nDiffPorts, now):
   return MeasurementName + '/' + \
      str(int(now)) + '-' + \
      localNode['node_name'] + '-' + \
      localProvider['provider_short_name'] + '-' + \
      remoteNode['node_name'] + '-' + \
      remoteProvider['provider_short_name'] + '-' + \
      cc + '-' + cmt + '-' + pathMgr + '-' + str(nDiffPorts) + '-' + \
      'ipv' + str(version) + '-' + \
      '.sca.bz2'


# ###### Run the measurement ################################################
def runMeasurement(summaryFile, localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version, cc, cmt, pathMgr, nDiffPorts, slice, now):
   remoteAddress = makeAddress(remoteSite, remoteNode, remoteProvider, version, slice)
   if cmt != 'off':
      remotePort   = makePort(remoteSite, remoteNode, None, version, slice)
      localAddress = makeAddress(localSite, localNode, None, version, slice)
   else:
      remotePort   = makePort(remoteSite, remoteNode, remoteProvider, version, slice)
      localAddress = makeAddress(localSite, localNode, localProvider, version, slice)

   variables      = getVariableSettings(localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version, cc, cmt, pathMgr, nDiffPorts, now)
   scalarFileName = getScalarName(localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version, cc, cmt, pathMgr, nDiffPorts, now)

   activeScalarFileName  = scalarFileName.replace('.sca.bz2', '-active.sca.bz2')
   passiveScalarFileName = scalarFileName.replace('.sca.bz2', '-passive.sca.bz2')

   summaryFile.write('--values="' + variables + '"\n')
   summaryFile.write('--input=' + activeScalarFileName + '\n')
   summaryFile.write('--values="' + variables + '"\n')
   summaryFile.write('--input=' + passiveScalarFileName + '\n')

   cmdLine = 'mkdir -p ' + MeasurementName + ' && ' + \
             'netperfmeter [' + str(remoteAddress) + ']:' + str(remotePort) + ' ' + \
             '-local=[' + str(localAddress) + '] ' + \
             '-scalar=' + scalarFileName + ' ' + \
             '-verbosity=1 ' + \
             '-tcp const0:const1400:const0:const0:sndbuf=16000000:rcvbuf=16000000:cc=' + cc + ':pathmgr=' + pathMgr + ':ndiffports=' + str(nDiffPorts) + ':cmt=' + cmt + ' ' + \
             '-runtime=' + str(Runtime)
   return doSSH(localNode, slice, cmdLine, True)



# ###########################################################################
# #### Main program                                                      ####
# ###########################################################################


# ====== Get configuration ==================================================
loginToPLC()
fullSiteList = fetchNorNetSiteList()
fillNodeList = fetchNorNetNodeList()

ExperimentNodes = []
for experimentNodeName in ExperimentNodeNames:
   experimentNode = fetchNorNetNode(experimentNodeName)
   if experimentNode == None:
      error('Node not found: ' + experimentNodeName)
   ExperimentNodes.append(experimentNode)

Slice = fetchNorNetSlice(SliceName)
if Slice == None:
   error('Slice not found: ' + SliceName)


# ====== Install ============================================================
if len(sys.argv) != 1:
   print 'Installing nodes!'

   processes = []
   for localNode in ExperimentNodes:
      cmdLine = 'sudo yum install -y autoconf automake libtool gcc-c++ make glib2-devel bzip2-devel lksctp-tools-devel valgrind-devel ; sudo yum upgrade -y ; sudo -u ' + SliceName + ' mkdir -p ~/src && cd ~/src && if [ -e netperfmeter ] ; then cd netperfmeter && git pull ; else git clone https://github.com/dreibh/netperfmeter.git && cd netperfmeter ; fi && ./bootstrap && ./configure --prefix=/usr && make && sudo make install'
      newProcess = doSSH(localNode, Slice, cmdLine, True)
      if newProcess != None:
         processes.append(newProcess)
   for process in processes:
      process.wait()

   sys.exit(0)


# ====== Prepare ============================================================
print '\x1b[34;1m###### Stage 1: Preparations ######\x1b[0m'
try:
   os.mkdir(MeasurementName)
except:
   pass
fullSummaryFileName = MeasurementName + '/results.summary'
summaryFileName     = MeasurementName + '/results.summary.new'
try:
   os.remove(summaryFileName)
except:
   pass
summaryFile = codecs.open(summaryFileName, 'w+', 'utf-8')
summaryFile.write('--varnames=' + getVariableNames() + '\n')
processes = []
for node in ExperimentNodes:
   newProcess = preparePassiveSide(node, Slice)
   if newProcess != None:
      processes.append(newProcess)
for process in processes:
   process.wait()
time.sleep(10)


# ====== Create runs ========================================================
print '\x1b[34;1m###### Stage 2: Runs ######\x1b[0m'
allRuns = []
now     = int(time.time())
for localNode in ExperimentNodes:
   for remoteNode in ExperimentNodes:
      if localNode == remoteNode:
         continue
      localSite          = getNorNetSiteOfNode(fullSiteList, localNode)
      localProviderList  = getNorNetProvidersForSite(localSite)
      remoteSite         = getNorNetSiteOfNode(fullSiteList, remoteNode)
      remoteProviderList = getNorNetProvidersForSite(remoteSite)
      for localProviderIndex in localProviderList:
         localProvider = localProviderList[localProviderIndex]
         for remoteProviderIndex in remoteProviderList:
            remoteProvider = remoteProviderList[remoteProviderIndex]
            for version in [ 4, 6 ]:
               if ((version == 6) and
                   ( (localProvider['provider_tunnelbox_ipv6'].ip == IPv6Address('::')) or
                     (remoteProvider['provider_tunnelbox_ipv6'].ip == IPv6Address('::')) )):
                  print 'IPv6-over-IPv4!'
                  continue

               print localNode['node_name'] + '/' + localProvider['provider_short_name'] + ' -> ' + \
                     remoteNode['node_name'] + '/' + remoteProvider['provider_short_name'] + \
                     ' with IPv' + str(version)

               for cmt in [ 'off', 'mptcp' ]:

                  cc         = 'default'
                  pathMgr    = 'default'
                  nDiffPorts = 16

                  allRuns.append([localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version,
                                 cc, cmt, pathMgr, nDiffPorts, now])


runNumber = 0
totalRuns = len(allRuns)
while len(allRuns) > 0:
   parallelRuns   = []
   allocatedNodes = []
   for run in allRuns:
      if not ((run[1]['node_name'] in allocatedNodes) or (run[4]['node_name'] in allocatedNodes)):
         allocatedNodes.append(run[1]['node_name'])
         allocatedNodes.append(run[4]['node_name'])
         parallelRuns.append(run)
   #print 'A=',allocatedNodes

   print '###### PARALLEL ######'
   processes = []
   for stage in [ 1, 2, 3 ]:
      for run in parallelRuns:

         localSite      = run[0]
         localNode      = run[1]
         localProvider  = run[2]
         remoteSite     = run[3]
         remoteNode     = run[4]
         remoteProvider = run[5]
         version        = run[6]
         cc             = run[7]
         cmt            = run[8]
         pathMgr        = run[9]
         nDiffPorts     = run[10]
         now            = run[11]

         if stage == 1:
            runNumber = runNumber + 1
            allRuns.remove(run)
            print '====== Run ' + str(runNumber) + ' of ' + str(totalRuns) + ' ======'

         elif stage == 2:
            newProcess = runMeasurement(
                            summaryFile,
                            localSite, localNode, localProvider, remoteSite, remoteNode, remoteProvider, version,
                            cc, cmt, pathMgr, nDiffPorts,
                            Slice, now)
            if newProcess != None:
               processes.append(newProcess)

         elif stage == 3:
            for process in processes:
               process.wait()
            processes = []


# ====== Get results ========================================================
print '\x1b[34;1m###### Stage 3: Results Collection ######\x1b[0m'
summaryFile.close()
for node in ExperimentNodes:
   doRSync(node, Slice, MeasurementName)
doLocal('cat ' + summaryFileName + ' >' + fullSummaryFileName + '.updated && if [ -e ' + fullSummaryFileName + ' ] ; then grep -v ^--varnames= ' + fullSummaryFileName + ' >>' + fullSummaryFileName + '.updated ; fi && mv ' + fullSummaryFileName + '.updated ' + fullSummaryFileName)


# ====== Clean up ===========================================================
print '\x1b[34;1m###### Stage 4: Clean-Up ######\x1b[0m'
processes = []
for node in ExperimentNodes:
   newProcess = cleanUpPassiveSide(node, Slice)
   if newProcess != None:
      processes.append(newProcess)
for process in processes:
   process.wait()
