#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# NorNet Test Setup
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# Needs package python-ipaddr (Fedora Core, Ubuntu, Debian)!
from ipaddr import IPv4Address, IPv4Network, IPv6Address, IPv6Network;

# NorNet
from NorNetTools         import *;
from NorNetAPI           import *;
from NorNetProviderSetup import *;
from NorNetSiteSetup     import *;


# ###### Remove test setup ##################################################
def removeTestConfiguration():
   fullSiteList = fetchNorNetSiteList()
   if fullSiteList != None:
      for siteIndex in fullSiteList:
         site = fullSiteList[siteIndex]
         removeNorNetSite(site['site_long_name'])


# ###### Make test setup ####################################################
def createTestConfiguration(userName, sliceName):
   # ====== Add tag types ===================================================
   makeNorNetTagTypes()

   # ====== Add test sites ==================================================
   norNetInformation = getNorNetInformationForAddress(getPLCAddress())
   plcNodeIndex      = norNetInformation['node_index']
   dnsServers = [ makeNorNetIP(NorNet_SiteIndex_Central, NorNet_CentralSite_BootstrapProviderIndex, plcNodeIndex, -1, 4),
                  makeNorNetIP(NorNet_SiteIndex_Central, NorNet_CentralSite_BootstrapProviderIndex, plcNodeIndex, -1, 6) ]
   ntpServerNames = [ 'ntp1.ptb.de', 'ntp2.ptb.de', 'ntp3.ptb.de',   # The PTB servers (very reliable sources)
                      'ntp1.uio.no', 'ntp2.uio.no' ]                 # UiO (nearby)

   ntpServers = []
   for ntpServer in ntpServerNames:
      ntpAddress = resolveHostname(ntpServer, AF_INET6)
      if ntpAddress != None:
         ntpServers.append(ntpAddress)
      ntpAddress = resolveHostname(ntpServer, AF_INET)
      if ntpAddress != None:
         ntpServers.append(ntpAddress)


   siteAlphaNorNetIndex = 1
   siteAlpha = makeNorNetSite('Simula Research Laboratory', 'SRL', 'srl', 'http://www.simula.nornet', 'simula.nornet',
                              siteAlphaNorNetIndex, 'Fornebu', 'Østlandet', 'Norge', 'NO', 59.895933, 10.627635, [
                                 [ 'Uninett', 'eth0', IPv4Address('132.252.156.70'), IPv6Address('fd55:5555::70') ],
                                 [ 'Telenor', 'eth0', IPv4Address('169.254.100.70'), IPv6Address('::') ]
                              ], 'Uninett', 'eth0', dnsServers, ntpServers)
   siteAlphaPCUID = makeNorNetPCU(siteAlpha, 'pcu', 'simula.nornet', IPv4Address('132.252.156.2'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteBetaNorNetIndex = 2
   siteBeta  = makeNorNetSite('Universitetet i Stavanger', 'UiS', 'uis', 'http://www.stavanger.nornet', 'stavanger.nornet',
                              siteBetaNorNetIndex, 'Stavanger',  'Rogaland', 'Norge', 'NO', 58.940799,5.703049, [
                                 [ 'Uninett', 'eth0', IPv4Address('132.252.156.71'), IPv6Address('fd55:5555::71') ],
                                 [ 'Telenor', 'eth0', IPv4Address('169.254.100.71'), IPv6Address('::') ]
                              ], 'Uninett', 'eth0', dnsServers, ntpServers)
   siteBetaPCUID = makeNorNetPCU(siteBeta, 'pcu', 'stavanger.nornet', IPv4Address('132.252.156.3'),
                                 'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteGammaNorNetIndex = 3
   siteGamma = makeNorNetSite('Universität Duisburg-Essen', 'UDE', 'ude', 'http://www.essen.nornet', 'essen.nornet',
                              siteGammaNorNetIndex, 'Essen',  'Nordrhein-Westfalen', 'Deutschland', 'DE', 51.476144, 7.011656, [
                                 [ 'Uninett', 'eth0', IPv4Address('132.252.156.72'), IPv6Address('::') ],
                                 [ 'Telenor', 'eth0', IPv4Address('169.254.100.72'), IPv6Address('::') ],
                                 [ 'Deutsches Forschungsnetz', 'eth0', IPv4Address('172.31.255.72'),  IPv6Address('::') ]
                              ], 'Deutsches Forschungsnetz', 'eth0', dnsServers, ntpServers)
   siteGammaPCUID = makeNorNetPCU(siteGamma, 'pcu', 'essen.nornet', IPv4Address('132.252.156.4'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteDeltaNorNetIndex = 4
   siteDelta = makeNorNetSite('Universitetet i Tromsø', 'UiT', 'uit', 'http://www.tromsoe.nornet', 'tromsoe.nornet',
                              siteDeltaNorNetIndex, 'Tromsø',  'Troms', 'Norge', 'NO', 69.681897,18.980541, [
                                 [ 'Uninett', 'eth0', IPv4Address('132.252.156.73'), IPv6Address('::') ],
                                 [ 'Telenor', 'eth0', IPv4Address('169.254.100.73'), IPv6Address('::') ]
                              ], 'Uninett', 'eth0', dnsServers, ntpServers)
   siteDeltaPCUID = makeNorNetPCU(siteDelta, 'pcu', 'tromsoe.nornet', IPv4Address('132.252.156.5'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteEpsilonNorNetIndex = 5
   siteEpsilon = makeNorNetSite('Universitetet i Trondheim', 'NTNU', 'ntnu', 'http://www.trondheim.nornet', 'trondheim.nornet',
                              siteEpsilonNorNetIndex, 'Trondheim',  'Sør-Trøndelag', 'Norge', 'NO', 63.419034,10.4022, [
                                 [ 'Uninett', 'eth0', IPv4Address('132.252.156.74'), IPv6Address('::') ],
                                 [ 'Telenor', 'eth0', IPv4Address('169.254.100.74'), IPv6Address('::') ]
                              ], 'Uninett', 'eth0', dnsServers, ntpServers)
   siteEpsilonPCUID = makeNorNetPCU(siteEpsilon, 'pcu', 'trondheim.nornet', IPv4Address('132.252.156.6'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   # ====== Add test nodes ==================================================
   firstAddressIndex = 100

   names = sorted(['akerbrygge', 'bygdoey', 'ekeberg', 'fornebu', 'frogner', 'grefsen', 'majorstuen', 'ullevaal'])
   i = 0
   for name in names:
      n = makeNorNetNode(siteAlpha, name, 1 + i, firstAddressIndex,
                         siteAlphaPCUID, 1 + i, 'eth0',
                         'Amiga 5000', 'reinstall')
      i = i + 1

   firstAddressIndex = 100
   names = sorted(['aaklungen', 'bjordammen', 'maridalsvannet', 'sognsvann', 'svartkulp', 'skjennungen', 'trollvann', 'tryvann'])
   i = 0
   for name in names:
      makeNorNetNode(siteBeta, name, 1 + i, firstAddressIndex,
                     siteBetaPCUID, 1 + i, 'eth0',
                     'Amiga 5000', 'reinstall')
      i = i + 1

   firstAddressIndex = 100
   names = sorted(['altenessen', 'baldeneysee', 'borbeck', 'kettwig', 'kray', 'kupferdreh', 'steele', 'zollvererin'])
   i = 0
   for name in names:
      makeNorNetNode(siteGamma, name, 1 + i, firstAddressIndex,
                     siteGammaPCUID, 1 + i, 'eth0',
                     'Amiga 5000', 'reinstall')
      i = i + 1

   firstAddressIndex = 100
   names = sorted(['roed', 'groenn', 'blaa', 'graa', 'svart', 'hvit', 'orange', 'gull'])
   i = 0
   for name in names:
      makeNorNetNode(siteDelta, name, 1 + i, firstAddressIndex,
                     siteDeltaPCUID, 1 + i, 'eth0',
                     'Amiga 5000', 'reinstall')
      i = i + 1

   firstAddressIndex = 100
   names = sorted(['troll', 'nisse', 'katt', 'hund', 'mus', 'sau', 'bjoern', 'reinsdyr'])
   i = 0
   for name in names:
      makeNorNetNode(siteEpsilon, name, 1 + i, firstAddressIndex,
                     siteEpsilonPCUID, 1 + i, 'eth0',
                     'Amiga 5000', 'reinstall')
      i = i + 1

   # ====== Add person to all test sites ====================================
   personID = lookupPersonID(userName)
   if personID == 0:
      error('Unable to find user ' + userName + '\n')

   getPLCServer().AddRoleToPerson(getPLCAuthentication(), 'user', personID)
   getPLCServer().AddRoleToPerson(getPLCAuthentication(), 'pi',   personID)
   getPLCServer().AddRoleToPerson(getPLCAuthentication(), 'tech', personID)

   getPLCServer().AddPersonToSite(getPLCAuthentication(), personID, siteAlpha['site_id'])
   getPLCServer().AddPersonToSite(getPLCAuthentication(), personID, siteBeta['site_id'])
   getPLCServer().AddPersonToSite(getPLCAuthentication(), personID, siteGamma['site_id'])
   getPLCServer().AddPersonToSite(getPLCAuthentication(), personID, siteDelta['site_id'])
   getPLCServer().AddPersonToSite(getPLCAuthentication(), personID, siteEpsilon['site_id'])

   getPLCServer().SetPersonPrimarySite(getPLCAuthentication(), personID, siteAlpha['site_id'])


   # ====== Add slice to all nodes ==========================================
   sliceID = lookupSliceID(sliceName)
   if sliceID == 0:
      error('Unable to find slice ' + sliceName + '\n')
   nodeList = getPLCServer().GetNodes(getPLCAuthentication(), { })
   nodeIDs  = []
   for node in nodeList:
      nodeID = int(node['node_id'])
      nodeIDs.append(nodeID)

   getPLCServer().AddSliceToNodes(getPLCAuthentication(), sliceID, nodeIDs)



createSetup = False
removeSetup = False

if len(sys.argv) > 1:
   if sys.argv[1] == '-create':
      createSetup = True
   elif sys.argv[1] == '-remove':
      removeSetup = True
   elif sys.argv[1] == '-renew':
      createSetup = True
      removeSetup = True
   else:
      error('Usage: ' + sys.argv[0] + ' [-create|-remove|-renew]')
else:
      error('Usage: ' + sys.argv[0] + ' [-create|-remove|-renew]')


log('***** Welcome to NorNet! *****')
loginToPLC()
if removeSetup == True:
   removeTestConfiguration()
if createSetup == True:
   createTestConfiguration('dreibh@simula.no', 'nn_test')
