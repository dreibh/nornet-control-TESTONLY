#!/bin/bash -e
#
# Debian Packaging Scripts
# Copyright (C) 2002-2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de

. ./debian.conf


# ====== Get variant ========================================================

BUILD_PREFIX="$1"   # e.g. DEBUG0001 (*must* be uppercase!)

VARIANTS="nornet-stable nornet-testing nornet-experimental"
PACKAGE_SUFFIX=""
if [ "$VARIANT" != "" ] ; then
   for v in $VARIANTS ; do
      if [ "$v" = "$VARIANT" ] ; then
         PACKAGE_SUFFIX="-${VARIANT}"
         break
      fi
   done
   if [ "$PACKAGE_SUFFIX" = "" ] ; then
      echo >&2 "Usage: $0 variant"
      echo "Possible variants are: $VARIANTS"
      exit 1
   fi
fi


# ====== Revert debian/changelog and debian/control =========================
if [ -e ".svn" ] ; then
   # Get SVN version identifier
   SVN_VERSION="`svnversion . | tr -d [M]`"
   BUILD_VERSION_IDENTIFIER="svn`printf "%07d" "${SVN_VERSION}"`${BUILD_PREFIX}"
else
   echo "*** Not an SVN repository ***"
   # No special SVN version
   SVN_VERSION="0000000"
   BUILD_VERSION_IDENTIFIER="${BUILD_PREFIX}"
fi

# When running the first time, backup the original Debian files
BACKUP_FILES="changelog rules control"
# VirtualBox has several control files ...
for backupFile in $BACKUP_FILES ; do
   if [ ! -e debian/${backupFile}.orig ] ; then
      cp debian/${backupFile} debian/${backupFile}.orig
   fi
done
# Revert Debian files (from the backup versions)
for backupFile in $BACKUP_FILES ; do
   cp debian/${backupFile}.orig debian/${backupFile}
done

echo -e "\x1b[34mBUILD_VERSION_IDENTIFIER: $BUILD_VERSION_IDENTIFIER\x1b[0m"


# ====== Update changelog header from Config.kmk version ====================
eval `grep "^KBUILD_VERSION_MAJOR[ \t]*=[ \t]*" Config.kmk | sed -e "s/ //g"`
eval `grep "^KBUILD_VERSION_MINOR[ \t]*=[ \t]*" Config.kmk | sed -e "s/ //g"`
eval `grep "^KBUILD_VERSION_PATCH[ \t]*=[ \t]*" Config.kmk | sed -e "s/ //g" -e "s/svn[0-9]*$/xxx/g"`
# echo "P=$KBUILD_VERSION_PATCH"  "

if [ "$KBUILD_VERSION_MAJOR" = "" ] ; then
   echo >&2 "ERROR: Unable to extract KBUILD_VERSION_MAJOR from Config.kmk!"
   exit 1
fi
if [ "$KBUILD_VERSION_MINOR" = "" ] ; then
   echo >&2 "ERROR: Unable to extract KBUILD_VERSION_MINOR from Config.kmk!"
   exit 1
fi
if [ "$KBUILD_VERSION_PATCH" = "" ] ; then
   echo >&2 "ERROR: Unable to extract KBUILD_VERSION_PATCH from Config.kmk!"
   exit 1
fi
PLAIN_VERSION="1:${KBUILD_VERSION_MAJOR}.${KBUILD_VERSION_MINOR}.${KBUILD_VERSION_PATCH}"

CHANGELOG_HEADER="`head -n1 debian/changelog`"
echo "Old CHANGELOG_HEADER=$CHANGELOG_HEADER"
CHANGELOG_HEADER=`echo "$CHANGELOG_HEADER" | sed -e "s/^\([a-zA-Z0-9]*\) (\([0-9]*:[0-9]*\.[0-9]*\.[0-9]*\)\(.*\))/\1 (${PLAIN_VERSION}~${BUILD_VERSION_IDENTIFIER})/g"`
echo "New CHANGELOG_HEADER=$CHANGELOG_HEADER"

# The package name, e.g. MyApplication
PACKAGE=`echo $CHANGELOG_HEADER | sed -e "s/(.*//" -e "s/ //g"`

# The package distribution, e.g. precise, raring, ...
PACKAGE_DISTRIBUTION=`echo $CHANGELOG_HEADER | sed -e "s/[^)]*)//" -e "s/;.*//g" -e "s/ //g"`
# The package's version, e.g. 1.2.3-1ubuntu1
PACKAGE_VERSION=`echo $CHANGELOG_HEADER | sed -e "s/.*(//" -e "s/).*//" -e "s/ //g" -e "s/ //g"`
# The package's output version, e.g. 1.2.3-1ubuntu
OUTPUT_VERSION=`echo $PACKAGE_VERSION   | sed -e "s/\(ubuntu\)[0-9]*$/\1/"`
# The package's Debian version, e.g. 1.2.3-1
DEBIAN_VERSION=`echo $OUTPUT_VERSION    | sed -e "s/ubuntu$//1"`
# The package's upstream version, e.g. 1.2.3
UPSTREAM_VERSION=`echo $DEBIAN_VERSION  | sed -e "s/-[0-9]*$//"`
# The package's plain upstream version, e.g. 1.2.3 (without e.g. ~svn<xxxx>)
PLAIN_VERSION=`echo $UPSTREAM_VERSION   | sed -e "s/\([0-9\.]*\)[-+~].*$/\1/"`


echo -e "\x1b[34m######################################################################\x1b[0m"
echo -e "\x1b[34mCHANGELOG_HEADER:     $CHANGELOG_HEADER\x1b[0m"
echo -e "\x1b[34mPACKAGE:              $PACKAGE\x1b[0m"
echo -e "\x1b[34mPACKAGE_DISTRIBUTION: $PACKAGE_DISTRIBUTION\x1b[0m"
echo -e "\x1b[34mPACKAGE_VERSION       $PACKAGE_VERSION\x1b[0m"
echo -e "\x1b[34mOUTPUT_VERSION:       $OUTPUT_VERSION\x1b[0m"
echo -e "\x1b[34mDEBIAN_VERSION:       $DEBIAN_VERSION\x1b[0m"
echo -e "\x1b[34mUPSTREAM_VERSION:     $UPSTREAM_VERSION\x1b[0m"
echo -e "\x1b[34mPLAIN_VERSION:        $PLAIN_VERSION\x1b[0m"
echo -e "\x1b[34m######################################################################\x1b[0m"


# ====== Create debian/changelog ============================================
(
   echo "${PACKAGE}${PACKAGE_SUFFIX} (${PLAIN_VERSION}~${BUILD_VERSION_IDENTIFIER}-1ubuntu1) ${PACKAGE_DISTRIBUTION}; urgency=medium"
   echo ""
   echo "  * New Debian package from SVN revision ${SVN_VERSION}."
   echo ""
   echo " -- $MAINTAINER  `env LANG=en date +"%a, %02d %b %Y %H:%M:%S %z"`"
   echo ""
   sed <debian/changelog -e "s/^${PACKAGE} /${PACKAGE}${PACKAGE_SUFFIX} /g"
) >debian/changelog.new


# ====== Apply changes ======================================================
for updatedFile in changelog ; do
   mv "debian/${updatedFile}.new" "debian/${updatedFile}"
done
