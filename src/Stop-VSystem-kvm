#!/bin/bash -e
#
# Stop virtual system
# Copyright (C) 2013 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# ###### Call VBoxManage with timeouts #######################################
vmcontrol ()
{
   intTimeout=45
   killTimeout=60
   
############# VirtualBox
   if [ "$1" = "vbox" ] ; then 
      sudo -u $NorNet_LocalNode_NorNetUser timeout -s INT -k $killTimeout $intTimeout VBoxManage controlvm $2 $3 || true

############# KVM
   elif [ "$1" = "kvm" ] ; then 
      sudo -u $NorNet_LocalNode_NorNetUser timeout -s INT -k $killTimeout $intTimeout virsh $2 $3 || true
   fi
#####################


}


# ###### Wait for shutdown ##################################################
wait_for_shutdown ()
# $1 = Name
# $2 = Timeout
{
   echo -n "Timeout=$3s: 0s"
   i=0
   while [ $i -lt $3 ] ; do
      echo -n "."
      sleep 1
      let i=$i+1
      let r=($i % 10)
      if [ $r -eq 0 ] ; then
         echo -n "${i}s"
      fi      
      status=`./Check-VSystem-kvm "$MACHINE_NAME"`
      
      
      if [ "$1" = "vbox" ] ; then
         if [ "$status" = "aborted" -o "$status" = "poweroff" -o "$status" = "stuck" ] ; then
            echo -n " OK!"
            break
         elif [ "$status" = "BAD_MACHINE" ] ; then
            echo -n " HANGING?"
            break
         fi
         
         
      elif [ "$1" = "kvm" ] ; then
         if [ "$status" = "aborted" -o "$status" = "shut off" -o "$status" = "stuck" ] ; then
      
            echo -n " OK!"
            break
         elif [ "$status" = "BAD_MACHINE" ] ; then
            echo -n " HANGING?"
            break      
         fi
      fi
      # Again send ACPI powerbutton.
      # If the system had been booting, the event might have been missed.
      if [ "$status" = "running" ] ; then
      
      ########### Virtual Box
         if [ "$1" = "vbox" ] ; then
            vmcontrol "$1" "$MACHINE_NAME" acpipowerbutton

      ################ KVM
         elif [ "$1" = "vbox" ] ; then
	    vmcontrol $1 shutdown "$MACHINE_NAME"
	 fi
      fi
   done || true
   echo ""
}


# ###### Stop virtual systems ###############################################
: <<'long_comment'
stop_virtual_systems ()
{
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   echo "`env LANG=C date +%FT%H:%M:%S`: Stopping virtual systems ..."
   for vsystem in $VSYSTEMS ; do
      echo "`env LANG=C date +%FT%H:%M:%S`: Processing $vsystem ..."
      NAME="BAD-NAME"
      STOPDELAY=0
      ( . ./$vsystem && \
        status=`Check-VSystem "$MACHINE_NAME"` && \
        if [ "$status" = "paused" ] ; then
           vmcontrol "$MACHINE_NAME" resume
           status=`Check-VSystem "$MACHINE_NAME"`
        fi
        if [ "$status" = "running" ] ; then
           echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $MACHINE_NAME (ACPI power button) ..." && \
           vmcontrol "$MACHINE_NAME" acpipowerbutton
           wait_for_shutdown "$MACHINE_NAME" "$STOPDELAY"
           if [ "$status" = "running" ] ; then
              echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $MACHINE_NAME (power off) ..." && \
              vmcontrol "$MACHINE_NAME" poweroff
           fi
        fi
      ) || true
   done   
}
long_comment

# ###### Main program #######################################################
if [ $# -lt 1 ] ; then
   echo >&2 "Usage: $0 VM_name [stop_delay]"
   exit 1
fi

NORNET_DIRECTORY="/etc/nornet"
MACHINE_NAME="$1"
if [ "$2" != "" ] ; then
   STOPDELAY="$2"
else
   STOPDELAY=0
fi


# ====== Get NorNet user name ===============================================
if [ -e $NORNET_DIRECTORY/nornetapi-config ] ; then
   . $NORNET_DIRECTORY/nornetapi-config
elif [ -e ./nornetapi-config ] ; then
   . ./nornetapi-config
fi
if [ "$NorNet_LocalNode_NorNetUser" = "" ] ; then
   NorNet_LocalNode_NorNetUser="nornetpp"
fi

if [ "$NorNet_LocalNode_Vplatform" = "kvm" ] ; then
   Vplatform="kvm"
elif [ "$NorNet_LocalNode_Vplatform" = "vbox" ] ; then
   Vplatform="vbox"
fi


# ====== Obtain machine status ==============================================
status=`./Check-VSystem-kvm "$MACHINE_NAME"`
if [ "$status" = "paused" ] ; then
   echo "`env LANG=C date +%FT%H:%M:%S`: Resuming $MACHINE_NAME to perform shutdown ..."

   ################### VirtualBox #####
   if [ "$Vplatform" = "vbox" ] ; then
      vmcontrol "$Vplatform" "$MACHINE_NAME" resume   
   ################### KVM ############
   elif [ "$Vplatform" = "kvm" ] ; then
      vmcontrol "$Vplatform" resume "$MACHINE_NAME"
   fi

   status=`./Check-VSystem-kvm "$MACHINE_NAME"`
fi

if [ "$status" = "running" ] ; then
   echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $MACHINE_NAME (ACPI power button) ..." && \
   
   ################### VirtualBox #####
   if [ "$Vplatform" = "vbox" ] ; then
      vmcontrol "$Vplatform" "$MACHINE_NAME" acpipowerbutton
#      wait_for_shutdown "$MACHINE_NAME" "$STOPDELAY"
   ################### KVM ############
   elif [ "$Vplatform" = "kvm" ] ; then
      vmcontrol "$Vplatform" shutdown "$MACHINE_NAME"
   fi

   wait_for_shutdown "$Vplatform" "$MACHINE_NAME" "$STOPDELAY"
   status=`./Check-VSystem-kvm "$MACHINE_NAME"`
fi


################### VirtualBox #####
if [ "$Vplatform" = "vbox" ] ; then 
   if [ "$status" = "running" -o "$status" = "stopping" ] ; then
      echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $MACHINE_NAME (power off) ..."
      if [ "$status" = "running" ] ; then
         vmcontrol "$Vplatform" "$MACHINE_NAME" poweroff
      fi
      wait_for_shutdown "$Vplatform" "$MACHINE_NAME" "$STOPDELAY"
   fi
      
################ KVM
elif [ "$Vplatform" = "kvm" ] ; then
   if [ "$status" = "running" -o "$status" = "shutdown" ] ; then

      echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $MACHINE_NAME (power off) ..."
      if [ "$status" = "running" ] ; then
         vmcontrol "$Vplatform" destroy "$MACHINE_NAME"
      fi
      wait_for_shutdown "$Vplatform" "$MACHINE_NAME" "$STOPDELAY"
   fi
fi

# ====== Work around for VirtualBox problem =================================
# Check whether the VirtualBox machine hangs.
# This seems to be a common and yet unfixed bug of VirtualBox ...
if [ "$Vplatform" = "vbox" ] ; then
   if [ -e "/var/run/nornet-server-$MACHINE_NAME.pid" ] ; then
      pid=`cat "/var/run/nornet-server-$MACHINE_NAME.pid"`
      if [ "$pid" != "" ] ; then
         if ps -p $pid >/dev/null 2>&1 ; then
            echo "`env LANG=C date +%FT%H:%M:%S`: $MACHINE_NAME seems to be BROKEN! Schei√üe!"
            ps -p $pid || true
            echo "Sending SIGKILL to $pid ..."
            sudo -u $NorNet_LocalNode_NorNetUser kill -KILL $pid || true
         fi
      fi
      rm -f "/var/run/nornet-server-$MACHINE_NAME.pid"
   fi
fi

