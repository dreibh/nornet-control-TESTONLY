#!/bin/bash -e
#
# NorNet Core Logo Text Script
# Copyright (C) 2017-2018 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de

SCRIPT_BASE=.
MAKE_LOGO=$SCRIPT_BASE/Make-Logo
MAKE_BACKGROUND=$SCRIPT_BASE/Make-Background
MAKE_PAINTING=$SCRIPT_BASE/Make-Painting
MAKE_MOSAIC=$SCRIPT_BASE/Make-Mosaic
MAKE_CROPPED=../image-resize-with-cropping


MAKEFILE="Makefile.desktop"
INPUTS=`find Input/ -maxdepth 1 -name "*.[pP][nN][gG]" -or -name "*.jpeg" -or -name "*.[jJ][pP][gG]"`
DOMAIN=".simula.nornet"
DIMENSIONS="2970x2100 1920x1200 1920x1080 1600x1200 1024x768"
VARIANTS="plain"   # oil mosaic"
JPEG_QUALITY=92.5
MAKE_LINKS=1


# ====== Initialize Makefile ================================================
rm -f $MAKEFILE
(
   echo "MAKE_LOGO       := $MAKE_LOGO"
   echo "MAKE_BACKGROUND := $MAKE_BACKGROUND"
   echo "MAKE_PAINTING   := $MAKE_PAINTING"
   echo "MAKE_MOSAIC     := $MAKE_MOSAIC"
   echo "MAKE_CROPPED    := $MAKE_CROPPED"
   echo ""
   echo -e "all:\tall-images"
   echo ""
) >$MAKEFILE


# ====== Make machine labels ================================================
for input in $INPUTS ; do
   if [[ `basename ${input}` =~ ^[a-z] ]] ; then
      hostname="`basename ${input} | sed -e "s/\.[a-zA-Z]*$//g"`${DOMAIN}"
      # echo "MACHINE: `basename ${input}`  $hostname"
      (
         echo "Output/Text/${hostname}.png:"
         echo -e "\t@echo \"Making label Output/Text/${hostname}.png ...\""
         echo -e "\t@\$(MAKE_LOGO) \"Output/Text/${hostname}.png\" \\"
         echo -e "\t   \"$hostname\" 256 10 \"Brushed Aluminium\" \"Comic Sans MS\" >/dev/null"
         echo ""
      ) >>$MAKEFILE
   fi
done


# ====== Make desktop images ================================================
for dimensions in $DIMENSIONS ; do
   width=`echo "$dimensions" | sed -e "s/^\(.*\)x\(.*\)$/\1/g"`
   height=`echo "$dimensions" | sed -e "s/^\(.*\)x\(.*\)$/\2/g"`
   aspectRatio=`echo "${width}/${height}" | bc -l`

   hostnameHeight=`echo "${height}*0.05" | bc -l`
   hostnameIndent=`echo "${height}*0.05" | bc -l`

   # ====== Make overlay layer ==============================================
   (
      echo "Output/Text/Overlay-${width}x${height}.png:"
      echo -e "\t@echo \"Making overlay Output/Text/Overlay-${width}x${height}.png ...\""
      echo -e "\t@mkdir -p Output/Text"
      echo -e "\t@./make-overlay Output/Text/Overlay-${width}x${height}.png ${width} ${height}"
      echo ""
   ) >>$MAKEFILE

   for input in $INPUTS ; do
      for variant in $VARIANTS ; do
         if [[ ${input} =~ ^.*\.png$ ]] ; then
            outputFormat="png"
         else
            outputFormat="jpeg"
         fi
         output="${width}x${height}/$variant/`echo "$input" | sed -e "s/^Input\///g" -e "s/\.\([pP][nN][gG]\|[jJ][pP][gG]\|jpeg\)$/.${outputFormat}/g"`"
         outputLink=`echo "$input" | sed -e "s/^Input\///g" -e "s/\.\([pP][nN][gG]\|[jJ][pP][gG]\|jpeg\)$/-${variant}-${width}x${height}.${outputFormat}/g"`

         # ====== Make variants =============================================
         # echo "$input -> $output, $variant ..."
         (
            echo -e "Output/Desktop-without-Logo/${output}:"
            echo -e "\t@echo \"Making image Output/Desktop-without-Logo/${output} ...\""
            # Ensure that directories are there:
            echo -e "\t@mkdir -p Output/Desktop-without-Logo/${width}x${height}/$variant Output/tmp/${width}x${height}/$variant"
            # Ensure that old hardlink gets removed:
            echo -e "\t@rm -f Output/Desktop-without-Logo/${outputLink}"

            # ------ Oil Painting -------------------------------------------
            if [ "$variant" = "oil" ] ; then
               echo -e "\t@\$(MAKE_PAINTING) \\"
               echo -e "\t   ${input} \\"
               echo -e "\t   Output/tmp/${output}-tmp2.png \\"
               echo -e "\t   32 >/dev/null"
               echo -e "\t@\$(MAKE_CROPPED) \\"
               echo -e "\t   Output/tmp/${output}-tmp2.png \\"
               echo -e "\t   Output/tmp/${output}-tmp.png \\"
               echo -e "\t   ${aspectRatio}"

            # ------ Mosaic -------------------------------------------------
            elif [ "$variant" = "mosaic" ] ; then
               (
                  echo -e "\t@\$(MAKE_MOSAIC) ${input} \\"
                  echo -e "\t   Output/tmp/${output}-tmp2.png \\"
                  echo -e "\t   24 4 4 hexagons rough >/dev/null"
                  echo -e "\t@\$(MAKE_CROPPED) \\"
                  echo -e "\t   Output/tmp/${output}-tmp2.png \\"
                  echo -e "\t   Output/tmp/${output}-tmp.png \\"
                  echo -e "\t   ${aspectRatio}"
               ) >>$MAKEFILE

            # ------ Plain --------------------------------------------------
            elif [ "$variant" = "plain" ] ; then
               if [ "$outputFormat" = "png" ] ; then
                  echo -e "\t@\$(MAKE_BACKGROUND) ${input} Output/tmp/${output}-tmp2.png >/dev/null"
               else
                  echo -e "\t@rm -f Output/tmp/${output}-tmp2.png"
                  echo -e "\t@ln ${input} Output/tmp/${output}-tmp2.png   # No color conversion for pictures!"
               fi
               echo -e "\t@\$(MAKE_CROPPED) \\"
               echo -e "\t   Output/tmp/${output}-tmp2.png \\"
               echo -e "\t   Output/tmp/${output}-tmp.png \\"
               echo -e "\t   ${aspectRatio}"

            # ------ Error --------------------------------------------------
            else
               echo >&2 "ERROR: Invalid variant $variant!"
               exit 1
            fi
         ) >>$MAKEFILE


         # ------ Resize ----------------------------------------------------
         (
            echo -e "\t@convert Output/tmp/${output}-tmp.png -resize ${width}x${height} -interlace line Output/Desktop-without-Logo/${output}"
            echo -e "\t@rm -f Output/tmp/${output}-tmp2.png Output/tmp/${output}-tmp.png"
            echo ""
         ) >>$MAKEFILE

         # ------ Combine image with logo layer -----------------------------
         (
            if [[ `basename ${input}` =~ ^[a-z] ]] ; then
               hostname="`basename ${input} | sed -e "s/\.[a-zA-Z]*$//g"`${DOMAIN}"
               # echo "MACHINE: `basename ${input}`  $hostname"
               echo -e "Output/Desktop-with-Logo/${output}:\tOutput/Text/Overlay-${width}x${height}.png Output/Desktop-without-Logo/${output} Output/Text/${hostname}.png"
            else
               echo -e "Output/Desktop-with-Logo/${output}:\tOutput/Text/Overlay-${width}x${height}.png Output/Desktop-without-Logo/${output}"
            fi
            echo -e "\t@echo \"Making image Output/Desktop-with-Logo/${output} ...\""
            # Ensure that directories are there:
            echo -e "\t@mkdir -p Output/Desktop-with-Logo/${width}x${height}/$variant Output/tmp/${width}x${height}/$variant"
            # Ensure that old hardlink gets removed:
            echo -e "\t@rm -f Output/Desktop-with-Logo/${outputLink}"
         ) >>$MAKEFILE
         if [[ `basename ${input}` =~ ^[a-z] ]] ; then
            # ~~~~~~ With hostname ~~~~~~~~~~~~~~~~~~~~~
            hostname="`basename ${input} | sed -e "s/\.[a-zA-Z]*$//g"`${DOMAIN}"
            (
               echo -e "\t@convert \\"
               echo -e "\t   \( Output/Desktop-without-Logo/${output}   \) \\"
               echo -e "\t   \( Output/Text/Overlay-${width}x${height}.png \) -gravity center -composite \\"
               echo -e "\t   \( Output/Text/${hostname}.png -trim +repage -resize x${hostnameHeight} \) \\"
               echo -e "\t      -gravity north -geometry +0+${hostnameIndent} -composite \\"
               if [ "$outputFormat" = "jpeg" ] ; then
                  echo -e "\t   -interlace line -quality ${JPEG_QUALITY} \\"
               else
                  echo -e "\t   -interlace line \\"
               fi
               echo -e "\t   Output/Desktop-with-Logo/${output}"
            ) >>$MAKEFILE
         else
            # ~~~~~~ Without hostname ~~~~~~~~~~~~~~~~~~
            (
               echo -e "\t@convert \\"
               echo -e "\t   \( Output/Desktop-without-Logo/${output}   \) -append \\"
               echo -e "\t   \( Output/Text/Overlay-${width}x${height}.png \) -gravity center -composite \\"
               if [ "$outputFormat" = "jpeg" ] ; then
                  echo -e "\t   -interlace line -quality ${JPEG_QUALITY} \\"
               else
                  echo -e "\t   -interlace line \\"
               fi
               echo -e "\t   Output/Desktop-with-Logo/${output}"
            ) >>$MAKEFILE
         fi

         # ------ Add EXIF information --------------------------------------
         (
            echo -e "\t@exiftool -q -overwrite_original -Copyright=\"Copyright `date '+%Y'` by Thomas Dreibholz\" \\"
            echo -e "\t   Output/Desktop-without-Logo/${output} \\"
            echo -e "\t   Output/Desktop-with-Logo/${output}"
            echo ""
         ) >>$MAKEFILE

         allImages="$allImages Output/Desktop-with-Logo/${output}"


         # ------ Make links ------------------------------------------------
         if [ $MAKE_LINKS -ne 0 ] ; then
            for type in Desktop-without-Logo Desktop-with-Logo ; do
               (
                  echo -e "Output/$type/${outputLink}:\tOutput/${type}/${output}"
                  echo -e "\t@if [ ! -e Output/${type}/${outputLink} ] ; then ln Output/${type}/${output} Output/${type}/${outputLink} ; fi"
                  echo ""
               ) >>$MAKEFILE
               allImages="$allImages Output/$type/${outputLink}"
            done
         fi

      done
   done
done

(
   echo -e "\nall-images:\t$allImages"
   echo ""
) >>$MAKEFILE


# ====== Make everything ====================================================
cores=`getconf _NPROCESSORS_ONLN`
make -j${cores} -f $MAKEFILE
