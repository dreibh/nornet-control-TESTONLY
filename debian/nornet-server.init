#!/bin/sh
# --------------- NorNet -- The Multi-Homing Testbed Project ----------------
#
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#

### BEGIN INIT INFO
# Provides:          nornet-server
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: NorNet Server
# Description:       This service provides the NorNet Server management.
### END INIT INFO


NAME="nornet-server"
DESC="NorNet Virtual Systems"
NORNET_USER="nornetpp"
NORNET_DIRECTORY="/etc/nornet"
LOGFILE="/var/log/nornet-server.log"
# NORNET_DIRECTORY=/home/dreibh/src/rn/nornet/nornet-control/src
# LOGFILE="/tmp/nornet-server.log"
PATH=$NORNET_DIRECTORY:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
ACTION="$1"
shift


# Check whether NorNet directory is existing
if [ ! -e "$NORNET_DIRECTORY" ] ; then
   exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


set -e

cd "$NORNET_DIRECTORY"

# Load configuration from API config file
NorNet_LocalNode_Hostname=""
NorNet_LocalNode_NorNetInterface=""
if [ ! -e ./vsystems ] ; then
   echo >&2 "ERROR: $NORNET_DIRECTORY/vsystems does not exist!"
   exit 0
fi

# Log what is going on ...
echo "`env LANG=C date +%FT%H:%M:%S`: ###### $0 $ACTION $@ ######"  >>$LOGFILE 2>&1


# ###### Start virtual systems ##############################################
start_virtual_systems ()
{
   echo "`env LANG=C date +%FT%H:%M:%S`: Stopping virtual systems ..."
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   for vsystem in $VSYSTEMS ; do
      echo "`env LANG=C date +%FT%H:%M:%S`: Processing $vsystem ..."
      NAME="BAD-NAME"
      STARTDELAY=0
      NUMCPUS=1
      GETHOSTTIMEDISABLED=1
      OPTIONS="--audio none --usb off --hpet on --pae on --hwvirtex on --nestedpaging on --largepages on --hwvirtexexcl on --vtxvpid on"
      ( . ./$vsystem && \
        echo "`env LANG=C date +%FT%H:%M:%S`: Starting $NAME" && \
        if [ "$NUMCPUS" != "" ] ; then sudo -u $NORNET_USER vboxmanage modifyvm "$NAME" --cpus "$NUMCPUS" || true ; fi && \
        if [ "$OPTIONS" != "" ] ; then sudo -u $NORNET_USER vboxmanage modifyvm "$NAME" $OPTIONS || true ; fi && \
        if [ "$GETHOSTTIMEDISABLED" != "" ] ; then sudo -u $NORNET_USER vboxmanage setextradata "$NAME" "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled" $GETHOSTTIMEDISABLED || true ; fi && \
        sudo -u $NORNET_USER vboxmanage startvm "$NAME" --type headless && \
        echo "`env LANG=C date +%FT%H:%M:%S`: Waiting $STARTDELAY seconds ..." && \
        sleep "$STARTDELAY" \
      ) || true
   done
   echo "`env LANG=C date +%FT%H:%M:%S`: Done!"
}


# ###### Get machine state ##################################################
get_machine_state ()
# $1 = Name
{
   status="BAD_MACHINE"
   s=`sudo -u $NORNET_USER vboxmanage showvminfo "$1" --machinereadable | grep VMState=` && status=`echo $s | sed -e "s/VMState=//" -e "s/\"//g"` || true
   echo "$status"
}


# ###### Wait for shutdown ##################################################
wait_for_shutdown ()
# $1 = Name
# $2 = Timeout
{
   i=0
   while [ $i -lt $2 ] ; do
      echo -n "."
      sleep 1
      i=$(($i+1))

      status=`get_machine_state "$NAME"`
      if [ "$status" = "aborted" -o "$status" = "poweroff" -o "$status" = "stuck" ] ; then
         echo " OK!"
         break
      fi
      # Again send ACPI powerbutton.
      # If the system had been booting, the event might have been missed.
      sudo -u $NORNET_USER vboxmanage controlvm "$1" acpipowerbutton || true
   done
}


# ###### Stop virtual systems ###############################################
stop_virtual_systems ()
{
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   echo "`env LANG=C date +%FT%H:%M:%S`: Starting virtual systems ..."
   for vsystem in $VSYSTEMS ; do
      echo "`env LANG=C date +%FT%H:%M:%S`: Processing $vsystem ..."
      NAME="BAD-NAME"
      STOPDELAY=0
      ( . ./$vsystem && \
        status=`get_machine_state "$NAME"` && \
        if [ "$status" = "paused" ] ; then
           sudo -u $NORNET_USER vboxmanage controlvm "$NAME" resume || true
           status=`get_machine_state "$NAME"`
        fi
        if [ "$status" = "running" ] ; then
           echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $NAME (ACPI power button) ..." && \
           sudo -u $NORNET_USER vboxmanage controlvm "$NAME" acpipowerbutton && \
           wait_for_shutdown "$NAME" "$STOPDELAY" && \
           echo "`env LANG=C date +%FT%H:%M:%S`: Stopping $NAME (power off) ..." && \
           sudo -u $NORNET_USER vboxmanage controlvm "$NAME" poweroff
        fi
      ) || true
   done
}


# ###### Show status of virtual systems #####################################
show_status ()
{
   VSYSTEMS=`find vsystems -name "[0-9][0-9]*[a-zA-Z0-9]" | sort`
   for vsystem in $VSYSTEMS ; do
      NAME="BAD-NAME"
      ( . ./$vsystem && \
         status=`get_machine_state "$NAME"` && \
         echo "$vsystem: $NAME -> $status"
      ) || true
   done
   echo "`env LANG=C date +%FT%H:%M:%S`: Done!"
}

# ###### Main program #######################################################
case "$ACTION" in
  start)
     # First, ensure that VirtualBox kernel modules are loaded!
     /etc/init.d/virtualbox start >>$LOGFILE 2>&1
     start_virtual_systems >>$LOGFILE 2>&1
     ;;
  stop)
     stop_virtual_systems >>$LOGFILE 2>&1
     ;;
  restart)
     stop_virtual_systems  >>$LOGFILE 2>&1
     start_virtual_systems >>$LOGFILE 2>&1
     ;;
  force-reload)
     ;;
  status)
     show_status
     ;;
  *)
     N=/etc/init.d/$NAME
     echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
     exit 1
     ;;
esac

exit 0
